#!/usr/bin/env python3
"""
Telegram News Bot (–≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∏—Å–∫, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta, date
from typing import List, Dict, Any, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, BufferedInputFile
from aiogram import types
import aiohttp
from bs4 import BeautifulSoup

from .config import BOT_TOKEN, TELEGRAM_CHANNELS
from .keyboards import (
    get_main_keyboard,
    get_main_menu,
    get_settings_keyboard,
    get_channels_keyboard,
    get_digest_keyboard,
    get_admin_keyboard,
    get_post_keyboard,
    get_top_news_buttons,
)
from .scheduler import NewsScheduler
from .admin import is_admin, get_users_statistics, send_message_to_all_users, send_message_to_user

from database.db import (
    init_db,
    add_user,
    get_user_channels,
    get_user_news_count,
    set_user_news_count,
    get_active_users,
    save_news,
    get_favorites,
    add_search_query,
    get_user_stats,
    add_view_history,
    get_url_by_token,
)
from parsers.telegram_parser import TelegramParser
from parsers.base_parser import BaseParser
from parsers.habr_parser import HabrParser

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
parser = TelegramParser()

# –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
from typing import Set
BROADCAST_ALL_WAITING: Set[int] = set()
BROADCAST_USER_WAITING: Set[int] = set()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from typing import Dict, List
NEWS_NAVIGATION: Dict[int, Dict] = {}  # user_id -> {posts, current_index, message_id, chat_id}

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
NAVIGATION_COOLDOWN = {}  # user_id -> timestamp

MENU_TEXTS = {
    "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
    "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
    "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É",
    "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
    "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
}

class NewsNavigator:
    def __init__(self, posts: List[Dict], start_index: int = 0):
        self.posts = posts
        self.current_index = start_index
        self.current_view_mode = "normal"  # normal, tldr, full
        self.post_contents = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞: {post_index: {"tldr": "...", "full": "..."}}
        self.message_id = None             # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def get_current_post(self) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç"""
        if 0 <= self.current_index < len(self.posts):
            return self.posts[self.current_index]
        return None
    
    def has_next(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"""
        return self.current_index < len(self.posts) - 1
    
    def has_prev(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"""
        return self.current_index > 0
    
    def next_post(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if self.has_next():
            self.current_index += 1
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            self.current_view_mode = "normal"
            return True
        return False
    
    def prev_post(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if self.has_prev():
            self.current_index -= 1
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            self.current_view_mode = "normal"
            return True
        return False
    
    def set_view_mode(self, mode: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        self.current_view_mode = mode
    
    def get_post_content(self, content_type: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        if self.current_index not in self.post_contents:
            return ""
        return self.post_contents[self.current_index].get(content_type, "")
    
    def set_post_content(self, content_type: str, content: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        if self.current_index not in self.post_contents:
            self.post_contents[self.current_index] = {}
        self.post_contents[self.current_index][content_type] = content
    
    def get_navigation_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        post = self.get_current_post()
        if not post:
            return "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        title = post.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        source = post.get("source", "")
        link = post.get("link", "")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        logger.info(f"DEBUG: –ü–æ—Å—Ç '{title[:50]}...' - source: '{source}', link: '{link}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        text = f"<b>{title}</b>\n\n"
        
        if source:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Telegram –ø–æ—Å—Ç–æ–º
            is_telegram = (
                "t.me" in link or 
                "cdn4.telesco.pe" in str(post.get("image_url", "")) or
                (source and source.lower() not in ["habr", "habr.com", "habr.ru"])
            )
            
            logger.info(f"DEBUG: is_telegram={is_telegram} –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source}'")
            
            if is_telegram:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                if source == "telegram" and "t.me" in link:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                    try:
                        channel_name = link.split('/')[-2] if '/' in link else 'telegram'
                        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Ç–∞–µ–º–æ–º—É –≤–∏–¥—É
                        if channel_name == 'vedomosti':
                            display_name = '–í–µ–¥–æ–º–æ—Å—Ç–∏'
                        elif channel_name == 'rbc_news':
                            display_name = '–†–ë–ö'
                        elif channel_name == 'mk_ru':
                            display_name = '–ú–ö'
                        elif channel_name == 'izvestia_ru':
                            display_name = '–ò–∑–≤–µ—Å—Ç–∏—è'
                        elif channel_name == 'rbcrostov':
                            display_name = '–†–ë–ö –†–æ—Å—Ç–æ–≤'
                        else:
                            display_name = channel_name.replace('_', ' ').title()
                        text += f"üì∫ –ö–∞–Ω–∞–ª: {display_name}\n"
                    except:
                        text += f"üì∫ –ö–∞–Ω–∞–ª: telegram\n"
                elif source:
                    # –î–ª—è Telegram –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    text += f"üì∫ –ö–∞–Ω–∞–ª: {source}\n"
                else:
                    text += f"üì∫ –ö–∞–Ω–∞–ª: telegram\n"
            elif source:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω
                text += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        
        if link:
            text += f"üîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if self.current_view_mode == "tldr" and self.get_post_content("tldr"):
            text += f"<b>üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{self.get_post_content('tldr')}\n\n"
        elif self.current_view_mode == "full" and self.get_post_content("full"):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏
            full_content = self.get_post_content('full')[:2000] + "..." if len(self.get_post_content('full')) > 2000 else self.get_post_content('full')
            text += f"<b>üìñ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è:</b>\n{full_content}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        text += f"üìÑ {self.current_index + 1} –∏–∑ {len(self.posts)}"
        
        return text
    
    def get_navigation_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if self.current_index > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="news_prev"))
        if self.current_index < len(self.posts) - 1:
            nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚û°Ô∏è", callback_data="news_next"))
        
        if nav_row:
            keyboard.append(nav_row)
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        if self.current_view_mode == "normal":
            # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–æ", callback_data="view_tldr")])
            keyboard.append([InlineKeyboardButton(text="üìñ –ü–æ–ª–Ω–∞—è", callback_data="view_full")])
        elif self.current_view_mode == "tldr":
            # –í —Ä–µ–∂–∏–º–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(text="üìñ –ü–æ–ª–Ω–∞—è", callback_data="view_full")])
            keyboard.append([InlineKeyboardButton(text="üîô –û–±—ã—á–Ω—ã–π –≤–∏–¥", callback_data="view_normal")])
        elif self.current_view_mode == "full":
            # –í —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–æ", callback_data="view_tldr")])
            keyboard.append([InlineKeyboardButton(text="üîô –û–±—ã—á–Ω—ã–π –≤–∏–¥", callback_data="view_normal")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_row = []
        current_post = self.get_current_post()
        if current_post:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç
            post_id = str(hash(current_post.get('link', '')))
            if post_id and post_id != '0':  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
                action_row.append(InlineKeyboardButton(text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{post_id}"))
        
        action_row.append(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="news_exit"))
        
        if action_row:
            keyboard.append(action_row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_media_files(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        post = self.get_current_post()
        if not post:
            return {}
        
        media = {}
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if post.get("image_url"):
            media["photo"] = post.get("image_url")
        
        # –í–∏–¥–µ–æ
        if post.get("video_url"):
            media["video"] = post.get("video_url")
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏/GIF
        if post.get("animation_url"):
            media["animation"] = post.get("animation_url")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        logger.info(f"  –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–¥–∏–∞: image_url={post.get('image_url')}, video_url={post.get('video_url')}, animation_url={post.get('animation_url')}")
        logger.info(f"  –ò—Ç–æ–≥–æ–≤—ã–π media dict: {media}")
        
        return media
    
    def needs_more_posts(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        return self.current_index >= len(self.posts) - 3  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 3 –ø–æ—Å—Ç–∞

async def _try_send_photo(message: Message, image_url: str, caption: str, reply_markup=None) -> bool:
    if not image_url:
        return False
    try:
        await message.answer_photo(photo=image_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=10) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="image.jpg")
                    await message.answer_photo(photo=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

async def _try_send_video(message: Message, video_url: str, caption: str, reply_markup=None) -> bool:
    if not video_url:
        return False
    try:
        await message.answer_video(video=video_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(video_url, timeout=15) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="video.mp4")
                    await message.answer_video(video=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

async def _try_send_animation(message: Message, animation_url: str, caption: str, reply_markup=None) -> bool:
    if not animation_url:
        return False
    try:
        await message.answer_animation(animation=animation_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(animation_url, timeout=15) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="animation.gif")
                    await message.answer_animation(animation=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

# ===== Helpers =====

def _to_date(date_str: str) -> date:
    try:
        return datetime.strptime(date_str, "%Y-%m-%d").date()
    except Exception:
        return date.today()

async def _collect_posts(days: int) -> List[Dict[str, Any]]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ days –¥–Ω–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (views)."""
    threshold = date.today() - timedelta(days=days - 1)
    all_posts: List[Dict[str, Any]] = []
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∑–∞ {days} –¥–Ω–µ–π...")
    
    for channel_url in TELEGRAM_CHANNELS:
        try:
            logger.info(f"–ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª: {channel_url}")
            posts = parser.parse_channel(channel_url, limit=60)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ —Å –∫–∞–Ω–∞–ª–∞ {channel_url}")
            
            for p in posts:
                p_date = _to_date(p.get("date", ""))
                if p_date >= threshold:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∫–∞–Ω–∞–ª–∞
                    if "vedomosti" in channel_url:
                        p['source'] = 'vedomosti'
                    elif "rbc_news" in channel_url:
                        p['source'] = 'rbc_news'
                    elif "mk_ru" in channel_url:
                        p['source'] = 'mk_ru'
                    elif "izvestia_ru" in channel_url:
                        p['source'] = 'izvestia_ru'
                    else:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
                        channel_name = channel_url.split('/')[-1] if channel_url.endswith('/') else channel_url.split('/')[-1]
                        p['source'] = channel_name
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if p.get("image_url") or p.get("video_url") or p.get("animation_url"):
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞: {p.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                        logger.info(f"  image_url: {p.get('image_url')}")
                        logger.info(f"  video_url: {p.get('video_url')}")
                        logger.info(f"  animation_url: {p.get('animation_url')}")
                        logger.info(f"  source: {p.get('source', '–ù–ï–¢')}")
                    else:
                        logger.debug(f"–ü–æ—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞: {p.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                        logger.debug(f"  source: {p.get('source', '–ù–ï–¢')}")
                    
                    all_posts.append(p)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {channel_url}: {e}")
            continue
    
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (views), –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ
    all_posts.sort(key=lambda x: (x.get("views", 0), x.get("date", "")), reverse=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    for i, post in enumerate(all_posts[:3]):
        logger.info(f"–ü–æ—Å—Ç {i+1}: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        logger.info(f"  –ú–µ–¥–∏–∞: image={post.get('image_url', '–ù–ï–¢')}, video={post.get('video_url', '–ù–ï–¢')}, animation={post.get('animation_url', '–ù–ï–¢')}")
        logger.info(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {post.get('source', '–ù–ï–¢')}")
    
    return all_posts

# ===== Commands =====

@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    user_id = message.from_user.id
    add_user(user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ç–æ–ø, –ø–æ–∏—Å–∫, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –¥–∞–π–¥–∂–µ—Å—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /top, /digest, /settings, /help"
    )
    await message.answer(text, reply_markup=get_main_menu(), parse_mode="HTML")

@dp.message(Command("help"))
async def help_command(message: Message) -> None:
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "/top ‚Äî —Ç–æ–ø (–∑–∞ 1 –¥–µ–Ω—å, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)\n"
        "'–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏' ‚Äî —Ä–∞—Å—à–∏—Ä–∏—Ç –æ—Ö–≤–∞—Ç –Ω–∞ +1 –¥–µ–Ω—å\n"
        "'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏' ‚Äî –Ω–æ–≤—ã–µ –ø–æ –¥–∞—Ç–µ\n"
        "'–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É' ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É/–∑–∞–≥–æ–ª–æ–≤–∫—É\n"
        "'‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ' ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
    )
    await message.answer(text, parse_mode="HTML")

# ===== Text menu (reply keyboard) =====

@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def latest_news(message: Message) -> None:
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr...")
    try:
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        posts = habr_parser.get_latest_news(limit=15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
        if not posts:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr")
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        navigator = NewsNavigator(posts, 0) # Start from index 0
        NEWS_NAVIGATION[message.from_user.id] = navigator
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞
        message_id = await _send_news_with_media(message, navigator)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        navigator.message_id = message_id
        NEWS_NAVIGATION[message.from_user.id] = navigator
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

@dp.message(F.text == "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def top_today(message: Message) -> None:
    await top_command(message)

# ===== Admin broadcast input handlers (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞) =====

@dp.message(lambda m: m.from_user is not None and m.from_user.id in BROADCAST_ALL_WAITING)
async def handle_broadcast_all(message: Message) -> None:
    if not is_admin(message.from_user.id):
        return
    text = (message.text or "").strip()
    BROADCAST_ALL_WAITING.discard(message.from_user.id)
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç. –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    result = await send_message_to_all_users(bot, text, admin_id=message.from_user.id)
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('sent',0)} | –û—à–∏–±–æ–∫: {result.get('errors',0)}")

@dp.message(lambda m: m.from_user is not None and m.from_user.id in BROADCAST_USER_WAITING)
async def handle_broadcast_user(message: Message) -> None:
    if not is_admin(message.from_user.id):
        return
    try:
        first_space = message.text.find(' ')
        target_id = int(message.text[:first_space])
        text = message.text[first_space+1:].strip()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 –ü—Ä–∏–≤–µ—Ç!")
        return
    BROADCAST_USER_WAITING.discard(message.from_user.id)
    result = await send_message_to_user(bot, target_id, text, admin_id=message.from_user.id)
    if result.get('success'):
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
async def ask_search_query(message: Message) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ IT –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ Habr:")

@dp.message(lambda m: (
    isinstance(getattr(m, 'text', None), str)
    and len(m.text.strip()) >= 3
    and not m.text.startswith('/')
    and m.text.strip() not in MENU_TEXTS
    and (m.from_user is None or (m.from_user.id not in BROADCAST_ALL_WAITING and m.from_user.id not in BROADCAST_USER_WAITING))
))
async def handle_search_query(message: Message) -> None:
    query = message.text.strip()
    add_search_query(message.from_user.id, query)
    
    await message.answer(f"üîç –ò—â—É IT –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query}</b>", parse_mode="HTML")
    
    try:
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        found = habr_parser.search_by_query(query, limit=15)
        
        if not found:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Habr –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        navigator = NewsNavigator(found, 0) # Start from index 0
        NEWS_NAVIGATION[message.from_user.id] = navigator
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ–¥–∏–∞
        message_id = await _send_news_with_media(message, navigator)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        navigator.message_id = message_id
        NEWS_NAVIGATION[message.from_user.id] = navigator
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Habr: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@dp.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message) -> None:
    items = get_favorites(message.from_user.id)
    if not items:
        await message.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ")
        return
    for title, url in items[:20]:
        await message.answer(f"<b>{title}</b>", parse_mode="HTML", reply_markup=get_post_keyboard(url))

@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message) -> None:
    stats = get_user_stats(message.from_user.id)
    text = (
        "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats.get('total_views', 0)}\n"
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats.get('total_saves', 0)}\n"
        f"–ü–æ–∏—Å–∫–æ–≤: {stats.get('total_searches', 0)}\n"
    )
    await message.answer(text, parse_mode="HTML")

# Callback –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "help")
async def help_callback(call: CallbackQuery) -> None:
    await call.answer()
    await help_command(call.message)

@dp.message(Command("top"))
async def top_command(message: Message) -> None:
    # –¢–æ–ø: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É (—Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å), –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–ï—â–µ"
    await message.answer("üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏...")
    posts = await _collect_posts(days=1)
    if not posts:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –ø–æ—Å—Ç–∞—Ö
    logger.info(f"–ü–æ—Å—Ç—ã –¥–ª—è NewsNavigator: {len(posts)}")
    for i, post in enumerate(posts[:3]):
        logger.info(f"–ü–æ—Å—Ç {i+1}: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        logger.info(f"  –ú–µ–¥–∏–∞: image={post.get('image_url', '–ù–ï–¢')}, video={post.get('video_url', '–ù–ï–¢')}, animation={post.get('animation_url', '–ù–ï–¢')}")
        logger.info(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {post.get('source', '–ù–ï–¢')}")
    
    user_limit = get_user_news_count(message.from_user.id)
    posts_to_show = posts[: max(15, user_limit)]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π
    navigator = NewsNavigator(posts_to_show, 0) # Start from index 0
    NEWS_NAVIGATION[message.from_user.id] = navigator
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞
    message_id = await _send_news_with_media(message, navigator)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    navigator.message_id = message_id
    NEWS_NAVIGATION[message.from_user.id] = navigator

@dp.callback_query(lambda c: c.data.startswith("top_news"))
async def top_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    await top_command(call.message)

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ more_top_news, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

# ===== Settings =====

@dp.callback_query(lambda c: c.data == "settings")
async def settings_callback(call: CallbackQuery) -> None:
    await call.answer()
    await show_settings(call.message)

async def show_settings(message: Message) -> None:
    uid = message.from_user.id
    news_count = get_user_news_count(uid)
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{news_count}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_settings_keyboard())

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_text_handler(message: Message) -> None:
    await show_settings(message)

@dp.callback_query(lambda c: c.data == "settings_news_count")
async def settings_news_count_callback(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    current = get_user_news_count(uid)
    text = (
        "üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5", callback_data="news_count_5")],
        [InlineKeyboardButton(text="10", callback_data="news_count_10")],
        [InlineKeyboardButton(text="15", callback_data="news_count_15")],
        [InlineKeyboardButton(text="20", callback_data="news_count_20")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")],
    ])
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("news_count_"))
async def news_count_set(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    new_val = int(call.data.split("_")[-1])
    set_user_news_count(uid, new_val)
    await call.message.edit_text(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_val}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )

@dp.callback_query(lambda c: c.data == "settings_channels")
async def settings_channels_callback(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    channels = get_user_channels(uid)
    text = "\n".join(["üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã</b>", "", *channels]) if channels else "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=get_channels_keyboard())

# ===== Digest =====

@dp.callback_query(lambda c: c.data == "digest")
async def digest_callback(call: CallbackQuery) -> None:
    await call.answer()
    await send_instant_digest(call.message)

async def send_instant_digest(message: Message) -> None:
    uid = message.from_user.id
    try:
        await message.answer("üìÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–π–¥–∂–µ—Å—Ç...")
        channels = get_user_channels(uid) or TELEGRAM_CHANNELS
        limit = get_user_news_count(uid)
        all_posts: List[Dict[str, Any]] = []
        for ch in channels[:5]:
            try:
                all_posts.extend(parser.parse_channel(ch, limit=limit))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {ch}: {e}")
        if not all_posts:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            return
        all_posts.sort(key=lambda x: (x.get("views", 0), x.get("date", "")), reverse=True)
        posts = all_posts[:limit]
        text = "üì∞ <b>–í–∞—à –¥–∞–π–¥–∂–µ—Å—Ç:</b>\n\n"
        for i, p in enumerate(posts, 1):
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            channel = p.get("channel", "?")
            views = p.get("views", 0)
            text += f"{i}. <b>{title}</b>\n   üì∫ {channel}   üëÅÔ∏è {views}\n\n"
        await message.answer(text, parse_mode="HTML", reply_markup=get_digest_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

# ===== Admin =====

async def show_admin_panel(message: Message) -> None:
    await message.answer("üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=get_admin_keyboard())

@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel_callback(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    await show_admin_panel(call.message)

@dp.message(Command("admin"))
@dp.message(Command("–∞–¥–º–∏–Ω"))
async def admin_command(message: Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    await show_admin_panel(message)

@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats_callback(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    try:
        stats_resp = await get_users_statistics(call.from_user.id)
        stats = stats_resp.get("stats", {}) if isinstance(stats_resp, dict) else {}
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
        )
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# Save favorite

@dp.callback_query(lambda c: c.data.startswith("save:"))
async def save_post(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":", 1)[1]
    link = get_url_by_token(token) or token
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –±–µ—Ä–µ–º –ø–æ–¥–ø–∏—Å—å
    title = (call.message.caption or call.message.text or "–°—Å—ã–ª–∫–∞").strip()
    # –û—á–∏—â–∞–µ–º –æ—Ç HTML-—Ç–µ–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    soup = BeautifulSoup(title, 'html.parser')
    clean_title = soup.get_text(strip=True)
    save_news(call.from_user.id, title=clean_title, url=link)
    await call.message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

# TLDR / FULL handlers (–ø—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
@dp.callback_query(lambda c: c.data.startswith("tldr:"))
async def tldr_handler(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":",1)[1]
    link = get_url_by_token(token) or token
    await _send_tldr(call.message, link)

@dp.callback_query(lambda c: c.data.startswith("full:"))
async def full_handler(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":",1)[1]
    link = get_url_by_token(token) or token
    await _send_full_article(call.message, link)

# ===== Article helpers =====

def _choose_article_parser(url: str):
    u = (url or "").lower()
    if "habr.com" in u:
        return HabrParser()
    elif "t.me/" in u or "/s/" in u:
        # –î–ª—è Telegram-—Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º BaseParser —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram
        logger.info(f"DEBUG: –í—ã–±—Ä–∞–Ω BaseParser –¥–ª—è Telegram URL: {url}")
        return BaseParser()
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º BaseParser
        logger.info(f"DEBUG: –í—ã–±—Ä–∞–Ω BaseParser –¥–ª—è URL: {url}")
        return BaseParser()

def _is_content_relevant(title: str, content: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫—É"""
    if not title or not content:
        return False
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    title_lower = title.lower()
    content_lower = content.lower()
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    title_words = [word for word in title_lower.split() if len(word) > 3]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    matches = 0
    for word in title_words[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if word in content_lower:
            matches += 1
    
    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    relevance = matches / len(title_words) if title_words else 0
    logger.info(f"DEBUG: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {relevance:.2f} ({matches}/{len(title_words)} —Å–ª–æ–≤)")
    
    return relevance > 0.3  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ 30%

def _summarize_text(text: str, max_chars: int = 300) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        logger.info("DEBUG: _summarize_text –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return ""
    
    logger.info(f"DEBUG: _summarize_text –ø–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"DEBUG: –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {text[:100]}...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    text = " ".join(text.split())
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(text) <= max_chars:
        logger.info(f"DEBUG: –¢–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å: {text}")
        return text
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    import re
    sentences = re.split(r'[.!?]+', text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = [s.strip() for s in sentences if s.strip()]
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
    if not sentences:
        return text[:max_chars] + "..."
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏–º–∏—Ç
    summary = ""
    for sentence in sentences:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if not summary and len(sentence) > max_chars:
            summary = sentence[:max_chars-3] + "..."
            break
        elif len(summary + sentence) <= max_chars:
            summary += sentence + ". "
        else:
            break
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    summary = summary.strip()
    if len(summary) < len(text):
        summary += "..."
    
    logger.info(f"DEBUG: –°–æ–∑–¥–∞–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤: {summary[:100]}...")
    
    return summary

async def _send_long_text(message: Message, text: str, header: str | None = None):
    from html import escape
    chunk_limit = 3800
    body = escape(text)
    if header:
        safe_header = escape(header)
        body = f"<b>{safe_header}</b>\n\n{body}"
    while body:
        chunk = body[:chunk_limit]
        await message.answer(chunk, parse_mode="HTML")
        body = body[chunk_limit:]

async def _send_tldr(message: Message, url: str):
    parser_obj = _choose_article_parser(url)
    res = parser_obj.parse_full_article(url)
    if not res.get("success"):
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}")
        return
    summary = _summarize_text(res.get("content", ""))
    title = res.get("title", "–ö—Ä–∞—Ç–∫–æ")
    await _send_long_text(message, summary, header=f"üìù {title}")

async def _send_full_article(message: Message, url: str):
    parser_obj = _choose_article_parser(url)
    res = parser_obj.parse_full_article(url)
    if not res.get("success"):
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}")
        return
    content = res.get("content", "")
    title = res.get("title", "–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è")
    await _send_long_text(message, content, header=f"üìñ {title}")

async def _send_news_with_media(message: Message, navigator: NewsNavigator, edit_message_id: int = None) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    text = navigator.get_navigation_text()
    keyboard = navigator.get_navigation_keyboard()
    media = navigator.get_media_files()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞: {media}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –Ω–∏–º
    if media.get("video"):
        try:
            if edit_message_id:
                await message.bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    media=types.InputMediaVideo(media=media["video"], caption=text, parse_mode="HTML"),
                    reply_markup=keyboard
                )
                return edit_message_id
            else:
                sent = await message.answer_video(
                    video=media["video"],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return sent.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            # Fallback: —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ BufferedInputFile
            try:
                import requests
                from aiogram.types import BufferedInputFile
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤–∏–¥–µ–æ
                response = requests.get(media["video"], timeout=5)
                if response.status_code == 200:
                    video_file = BufferedInputFile(response.content, filename="video.mp4")
                    
                    if edit_message_id:
                        await message.bot.edit_message_media(
                            chat_id=message.chat.id,
                            message_id=edit_message_id,
                            media=types.InputMediaVideo(media=video_file, caption=text, parse_mode="HTML"),
                            reply_markup=keyboard
                        )
                        return edit_message_id
                    else:
                        sent = await message.answer_video(
                            video=video_file,
                            caption=text,
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                        return sent.message_id
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {response.status_code}")
            except Exception as download_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {download_error}")
            
            # –ï—Å–ª–∏ –≤—Å–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.info("Fallback –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ")
            if edit_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text=text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return edit_message_id
                except Exception as edit_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await message.bot.delete_message(chat_id=message.chat.id, message_id=edit_message_id)
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
                    except Exception as delete_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
            else:
                sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                return sent.message_id
    
    elif media.get("animation"):
        try:
            if edit_message_id:
                await message.bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    media=types.InputMediaAnimation(media=media["animation"], caption=text, parse_mode="HTML"),
                    reply_markup=keyboard
                )
                return edit_message_id
            else:
                sent = await message.answer_animation(
                    animation=media["animation"],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return sent.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            # Fallback –∫ —Ç–µ–∫—Å—Ç—É
            logger.info("Fallback –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
            if edit_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text=text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return edit_message_id
                except Exception as edit_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await message.bot.delete_message(chat_id=message.chat.id, message_id=edit_message_id)
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
                    except Exception as delete_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
            else:
                sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                return sent.message_id
    
    elif media.get("photo"):
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {media['photo']}")
            if edit_message_id:
                await message.bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    media=types.InputMediaPhoto(media=media["photo"], caption=text, parse_mode="HTML"),
                    reply_markup=keyboard
                )
                return edit_message_id
            else:
                sent = await message.answer_photo(
                    photo=media["photo"],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                return sent.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # Fallback: —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ BufferedInputFile
            try:
                import requests
                from aiogram.types import BufferedInputFile
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
                response = requests.get(media["photo"], timeout=5)
                if response.status_code == 200:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    ext = "jpg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if ".png" in media["photo"].lower():
                        ext = "png"
                    elif ".webp" in media["photo"].lower():
                        ext = "webp"
                    elif ".gif" in media["photo"].lower():
                        ext = "gif"
                    
                    photo_file = BufferedInputFile(response.content, filename=f"photo.{ext}")
                    
                    if edit_message_id:
                        await message.bot.edit_message_media(
                            chat_id=message.chat.id,
                            message_id=edit_message_id,
                            media=types.InputMediaPhoto(media=photo_file, caption=text, parse_mode="HTML"),
                            reply_markup=keyboard
                        )
                        return edit_message_id
                    else:
                        sent = await message.answer_photo(
                            photo=photo_file,
                            caption=text,
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                        return sent.message_id
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {response.status_code}")
            except Exception as download_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {download_error}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback –¥–ª—è Telegram –º–µ–¥–∏–∞
                if "cdn4.telesco.pe" in media["photo"]:
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º User-Agent
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                        }
                        response = requests.get(media["photo"], headers=headers, timeout=10)
                        if response.status_code == 200:
                            photo_file = BufferedInputFile(response.content, filename="photo.jpg")
                            
                            if edit_message_id:
                                await message.bot.edit_message_media(
                                    chat_id=message.chat.id,
                                    message_id=edit_message_id,
                                    media=types.InputMediaPhoto(media=photo_file, caption=text, parse_mode="HTML"),
                                    reply_markup=keyboard
                                )
                                return edit_message_id
                            else:
                                sent = await message.answer_photo(
                                    photo=photo_file,
                                    caption=text,
                                    parse_mode="HTML",
                                    reply_markup=keyboard
                                )
                                return sent.message_id
                    except Exception as telegram_fallback_error:
                        logger.error(f"Telegram fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {telegram_fallback_error}")
            
            # –ï—Å–ª–∏ –≤—Å–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.info("Fallback –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞")
            if edit_message_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text=text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    return edit_message_id
                except Exception as edit_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await message.bot.delete_message(chat_id=message.chat.id, message_id=edit_message_id)
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
                    except Exception as delete_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                        return sent.message_id
            else:
                sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
                return sent.message_id
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    if edit_message_id:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=edit_message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        return edit_message_id
    else:
        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        return sent.message_id

async def _load_more_posts_if_needed(navigator: NewsNavigator, user_id: int) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."""
    if not navigator.needs_more_posts():
        return False
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        current_post = navigator.get_current_post()
        if not current_post:
            return False
        
        source = current_post.get("source", "")
        
        if source == "habr.com":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr
            from parsers.habr_parser import HabrParser
            habr_parser = HabrParser()
            current_count = len(navigator.posts)
            new_posts = habr_parser.get_latest_news(limit=current_count + 10)
            
            if len(new_posts) > current_count:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                existing_links = {p.get("link") for p in navigator.posts}
                for post in new_posts:
                    if post.get("link") not in existing_links:
                        navigator.posts.append(post)
                return True
                
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Telegram
            days = 2 if len(navigator.posts) < 10 else 3
            new_posts = await _collect_posts(days=days)
            
            if new_posts:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                existing_links = {p.get("link") for p in navigator.posts}
                for post in new_posts:
                    if post.get("link") not in existing_links:
                        post['source'] = 'telegram'
                        navigator.posts.append(post)
                return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False

# ===== News Navigation Callbacks =====

@dp.callback_query(lambda c: c.data == "news_next")
async def news_next_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    current_time = time.time()
    if user_id in NAVIGATION_COOLDOWN:
        if current_time - NAVIGATION_COOLDOWN[user_id] < 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=False)
            return
    
    NAVIGATION_COOLDOWN[user_id] = current_time
    
    if user_id not in NEWS_NAVIGATION:
        await call.message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    navigator = NEWS_NAVIGATION[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    await _load_more_posts_if_needed(navigator, user_id)
    
    if navigator.next_post():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message_id = await _send_news_with_media(call.message, navigator, call.message.message_id)
            navigator.message_id = message_id
            NEWS_NAVIGATION[user_id] = navigator
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
            try:
                new_message = await _send_news_with_media(call.message, navigator)
                navigator.message_id = new_message
                NEWS_NAVIGATION[user_id] = navigator
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await call.message.delete()
            except Exception as delete_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
    else:
        await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å")

@dp.callback_query(lambda c: c.data == "news_prev")
async def news_prev_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    current_time = time.time()
    if user_id in NAVIGATION_COOLDOWN:
        if current_time - NAVIGATION_COOLDOWN[user_id] < 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=False)
            return
    
    NAVIGATION_COOLDOWN[user_id] = current_time
    
    if user_id not in NEWS_NAVIGATION:
        await call.message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    navigator = NEWS_NAVIGATION[user_id]
    if navigator.prev_post():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message_id = await _send_news_with_media(call.message, navigator, call.message.message_id)
            navigator.message_id = message_id
            NEWS_NAVIGATION[user_id] = navigator
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            message_id = await _send_news_with_media(call.message, navigator)
            navigator.message_id = message_id
            NEWS_NAVIGATION[user_id] = navigator
    else:
        await call.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å")

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@dp.callback_query(lambda c: c.data == "view_tldr")
async def view_tldr_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    logger.info(f"DEBUG: view_tldr_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    current_time = time.time()
    if user_id in NAVIGATION_COOLDOWN:
        if current_time - NAVIGATION_COOLDOWN[user_id] < 0.5:  # 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ", show_alert=False)
            return
    
    NAVIGATION_COOLDOWN[user_id] = current_time
    
    if user_id not in NEWS_NAVIGATION:
        logger.error(f"DEBUG: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    navigator = NEWS_NAVIGATION[user_id]
    post = navigator.get_current_post()
    if not post:
        logger.error(f"DEBUG: –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    logger.info(f"DEBUG: –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
    
    # –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    try:
        logger.info(f"DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        logger.info(f"DEBUG: URL –ø–æ—Å—Ç–∞: {post.get('link', '–ù–ï–¢')}")
        
        parser_obj = _choose_article_parser(post.get("link", ""))
        res = parser_obj.parse_full_article(post.get("link", ""))
        
        if res.get("success"):
            content = res.get("content", "")
            current_title = post.get("title", "")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞: {current_title[:50]}...")
            logger.info(f"DEBUG: –î–ª–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"DEBUG: –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content[:100]}...")
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω)
            logger.info(f"DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            navigator.set_post_content("full", content)
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            summary = _summarize_text(content)
            navigator.set_post_content("tldr", summary)
        else:
            logger.error(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ fallback
            navigator.set_post_content("full", post.get("title", ""))
            navigator.set_post_content("tldr", post.get("title", ""))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ fallback
        navigator.set_post_content("full", post.get("title", ""))
        navigator.set_post_content("tldr", post.get("title", ""))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    navigator.set_view_mode("tldr")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        message_id = await _send_news_with_media(call.message, navigator, call.message.message_id)
        navigator.message_id = message_id
        NEWS_NAVIGATION[user_id] = navigator
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@dp.callback_query(lambda c: c.data == "view_full")
async def view_full_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    logger.info(f"DEBUG: view_full_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    current_time = time.time()
    if user_id in NAVIGATION_COOLDOWN:
        if current_time - NAVIGATION_COOLDOWN[user_id] < 0.5:  # 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ", show_alert=False)
            return
    
    NAVIGATION_COOLDOWN[user_id] = current_time
    
    if user_id not in NEWS_NAVIGATION:
        logger.error(f"DEBUG: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    navigator = NEWS_NAVIGATION[user_id]
    post = navigator.get_current_post()
    if not post:
        logger.error(f"DEBUG: –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    logger.info(f"DEBUG: –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
    
    # –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    try:
        logger.info(f"DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞: {post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        logger.info(f"DEBUG: URL –ø–æ—Å—Ç–∞: {post.get('link', '–ù–ï–¢')}")
        
        parser_obj = _choose_article_parser(post.get("link", ""))
        res = parser_obj.parse_full_article(post.get("link", ""))
        
        if res.get("success"):
            content = res.get("content", "")
            current_title = post.get("title", "")
            
            logger.info(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞: {current_title[:50]}...")
            logger.info(f"DEBUG: –î–ª–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"DEBUG: –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content[:100]}...")
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω)
            logger.info(f"DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            navigator.set_post_content("full", content)
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä–∞—Ç–∫–æ"
            summary = _summarize_text(content)
            navigator.set_post_content("tldr", summary)
        else:
            logger.error(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ fallback
            navigator.set_post_content("full", post.get("title", ""))
            navigator.set_post_content("tldr", post.get("title", ""))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ fallback
        navigator.set_post_content("full", post.get("title", ""))
        navigator.set_post_content("tldr", post.get("title", ""))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏
    navigator.set_view_mode("full")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        message_id = await _send_news_with_media(call.message, navigator, call.message.message_id)
        navigator.message_id = message_id
        NEWS_NAVIGATION[user_id] = navigator
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@dp.callback_query(lambda c: c.data == "view_normal")
async def view_normal_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    current_time = time.time()
    if user_id in NAVIGATION_COOLDOWN:
        if current_time - NAVIGATION_COOLDOWN[user_id] < 0.5:  # 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ", show_alert=False)
            return
    
    NAVIGATION_COOLDOWN[user_id] = current_time
    
    if user_id not in NEWS_NAVIGATION:
        return
    
    navigator = NEWS_NAVIGATION[user_id]
    navigator.set_view_mode("normal")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    try:
        message_id = await _send_news_with_media(call.message, navigator, call.message.message_id)
        navigator.message_id = message_id
        NEWS_NAVIGATION[user_id] = navigator
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.callback_query(lambda c: c.data == "news_exit")
async def news_exit_callback(call: CallbackQuery) -> None:
    await call.answer()
    user_id = call.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if user_id in NEWS_NAVIGATION:
        del NEWS_NAVIGATION[user_id]
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="latest_news")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="top_news")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="search_news")],
        [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await call.message.edit_text("üì∞ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.answer("üì∞ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=main_menu_keyboard)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.delete()
        except Exception as delete_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")

# ===== Admin broadcast =====

@dp.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast_menu(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    from .admin import get_broadcast_keyboard
    await call.message.edit_text("üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", parse_mode="HTML", reply_markup=get_broadcast_keyboard())

@dp.callback_query(lambda c: c.data == "admin_broadcast_all")
async def admin_broadcast_all(call: CallbackQuery, state=None) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    BROADCAST_ALL_WAITING.add(call.from_user.id)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

@dp.callback_query(lambda c: c.data == "admin_broadcast_user")
async def admin_broadcast_user(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    BROADCAST_USER_WAITING.add(call.from_user.id)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–±–µ–ª —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data == "main_menu")
async def go_main_menu(call: CallbackQuery) -> None:
    await call.answer()
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="latest_news")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="top_news")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="search_news")],
        [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await call.message.edit_text("üì∞ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.answer("üì∞ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=main_menu_keyboard)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.delete()
        except Exception as delete_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")

# ===== Main menu callbacks =====

@dp.callback_query(lambda c: c.data == "latest_news")
async def latest_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    await latest_news(call.message)

@dp.callback_query(lambda c: c.data == "top_news")
async def top_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    await top_command(call.message)

@dp.callback_query(lambda c: c.data == "search_news")
async def search_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    await ask_search_query(call.message)

@dp.callback_query(lambda c: c.data == "favorites")
async def favorites_callback(call: CallbackQuery) -> None:
    await call.answer()
    await show_favorites(call.message)

@dp.callback_query(lambda c: c.data == "stats")
async def stats_callback(call: CallbackQuery) -> None:
    await call.answer()
    await show_stats(call.message)

@dp.callback_query(lambda c: c.data == "settings")
async def settings_callback(call: CallbackQuery) -> None:
    await call.answer()
    await show_settings(call.message)

# ===== Habr "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏" callback =====

@dp.callback_query(lambda c: c.data.startswith("more_habr_news"))
async def more_habr_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    try:
        parts = call.data.split(":")
        offset = int(parts[1]) if len(parts) > 1 else 10
        
        await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr...")
        
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        posts = habr_parser.get_more_news(offset=offset, limit=15)
        
        if not posts:
            await call.message.edit_text("‚ùå –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        navigator = NewsNavigator(posts, 0) # Start from index 0
        NEWS_NAVIGATION[call.from_user.id] = navigator
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–∏
        text = navigator.get_navigation_text()
        keyboard = navigator.get_navigation_keyboard()
        
        sent_message = await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        navigator.message_id = sent_message.message_id
        NEWS_NAVIGATION[call.from_user.id] = navigator
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

# Fallback

@dp.callback_query()
async def unknown_callback(call: CallbackQuery) -> None:
    await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {call.data}")

@dp.message()
async def handle_all_messages(message: Message) -> None:
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –º–µ–Ω—é –Ω–∏–∂–µ", reply_markup=get_main_keyboard())

async def main() -> None:
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    scheduler = NewsScheduler()
    scheduler.bot = bot
    await scheduler.setup_all_schedules()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())