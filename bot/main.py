import asyncio
import logging
import io
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from .config import BOT_TOKEN, TELEGRAM_CHANNELS
from .keyboards import (
    get_main_menu,
    get_themes_menu,
    get_news_buttons,
    get_full_article_buttons,
    get_top_news_buttons,
    get_top_news_initial_buttons,
    get_manage_channels_buttons,
    get_cancel_button,
    get_settings_buttons,
    get_post_action_buttons,
    get_digest_schedule_buttons,
    get_time_selection_buttons,
    get_days_selection_buttons,
    get_theme_selection_buttons,
    get_notification_settings_buttons,
    get_statistics_buttons,
    get_rating_buttons,
    get_comment_buttons,
    get_recommendations_buttons,
    get_export_format_buttons,
    get_search_advanced_buttons,
    get_archive_buttons,
)
from .utils import (
    format_news_message, 
    format_favorites_list, 
    clean_html, 
    summarize_text, 
    apply_filters,
    analyze_user_activity,
    generate_recommendations,
    export_to_markdown,
    export_to_csv,
    export_to_json,
    generate_activity_summary,
    format_notification_message,
    extract_tags_from_text,
    calculate_reading_time,
    format_time_spent,
)
from .scheduler import NewsScheduler
from parsers.habr_parser import HabrParser
from parsers.telegram_parser import TelegramParser
from database.db import (
    init_db,
    add_user,
    save_news,
    get_favorites,
    get_user_channels,
    set_user_channels,
    get_user_news_count,
    set_user_news_count,
    get_user_filters,
    set_user_filters,
    add_view_history,
    get_user_stats,
    add_search_query,
    add_comment,
    get_post_comments,
    add_post_rating,
    get_post_rating,
    add_recommendation,
    get_recommendations,
    set_digest_schedule,
    get_digest_schedule,
    add_notification,
    get_unread_notifications,
    mark_notification_read,
    archive_post,
    add_tag,
    get_popular_tags,
    add_export_record,
    update_user_activity,
    get_active_users,
    get_view_history,
    delete_notification,
    get_user_theme,
    set_user_theme,
    get_user_notification_settings,
    set_user_notification_settings,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()
    waiting_for_channel_input = State()  # –î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    waiting_for_filter_input = State()   # –î–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
    waiting_for_comment_input = State()  # –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    waiting_for_time_input = State()     # –î–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    waiting_for_days_input = State()     # –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    waiting_for_theme_input = State()    # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    waiting_for_advanced_search = State() # –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
parser = HabrParser()
tg_parser = TelegramParser()
scheduler = NewsScheduler(bot)  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_cache = {}
top_news_cache = {}  # –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π

@dp.message(Command("start"))
async def cmd_start(message: Message):
    add_user(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –º–∏—Ä–∞ IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu(),
    )

@dp.message(Command("test_parser"))
async def test_parser(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
        test_channel = "https://t.me/tproger"
        await message.answer(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–µ—Ä –Ω–∞ –∫–∞–Ω–∞–ª–µ: {test_channel}")
        
        posts = tg_parser.parse_channel(test_channel, 3)
        if posts:
            result = f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤:\n\n"
            for i, post in enumerate(posts[:3], 1):
                title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:100]
                text = post.get('text', '')[:200]
                result += f"{i}. {title}\n"
                if text:
                    result += f"   {text}\n"
                result += f"   –°—Å—ã–ª–∫–∞: {post.get('link', '–ù–µ—Ç')}\n\n"
        else:
            result = "‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã"
        
        await message.answer(result)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@dp.message(lambda message: message.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def get_latest_news(message: Message):
    await message.answer("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    try:
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
        include_keys, exclude_keys = get_user_filters(message.from_user.id)
        per_batch = get_user_news_count(message.from_user.id)

        news_list = parser.get_latest_news(limit=per_batch * 2)
        news_list = apply_filters(news_list, include_keys, exclude_keys)
        news_list = news_list[:per_batch]

        if not news_list:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        for i, news in enumerate(news_list):
            news_id = f"habr_{i}"
            news_cache[news_id] = news

            msg = format_news_message(news)
            await message.answer(
                msg,
                reply_markup=get_news_buttons(news["link"], news_id),
                parse_mode="HTML",
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(news_list) - 1:
                await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º")
async def search_themes(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_themes_menu())

@dp.message(lambda message: message.text == "üéØ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
async def start_search_query(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python machine learning'):")
    await state.set_state(SearchStates.waiting_for_query)

@dp.message(SearchStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    query = message.text.strip()

    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    await message.answer(f"üîç –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")

    try:
        include_keys, exclude_keys = get_user_filters(message.from_user.id)
        per_batch = get_user_news_count(message.from_user.id)
        news_list = parser.search_by_query(query, limit=per_batch * 2)
        news_list = apply_filters(news_list, include_keys, exclude_keys)[:per_batch]

        if not news_list:
            await message.answer(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.",
                reply_markup=get_main_menu(),
            )
            await state.clear()
            return

        for i, news in enumerate(news_list):
            news_id = f"search_{hash(query + str(i)) % 1000000}"
            news_cache[news_id] = news

            msg = format_news_message(news)
            await message.answer(
                msg,
                reply_markup=get_news_buttons(news["link"], news_id),
                parse_mode="HTML",
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(news_list) - 1:
                await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
            reply_markup=get_main_menu(),
        )

    await state.clear()

@dp.callback_query(lambda call: call.data == "add_channel")
async def add_channel_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>https://t.me/channel_name</code>\n"
        "–∏–ª–∏ <code>@channel_name</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_button()
    )
    await state.set_state(SearchStates.waiting_for_channel_input)
    await call.answer()

@dp.message(SearchStates.waiting_for_channel_input)
async def process_channel_input(message: Message, state: FSMContext):
    channel_input = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if not channel_input:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if channel_input.startswith('@'):
        channel_url = f"https://t.me/{channel_input[1:]}"
    elif channel_input.startswith('https://t.me/'):
        channel_url = channel_input
    else:
        channel_url = f"https://t.me/{channel_input}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_channels = get_user_channels(message.from_user.id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
    if channel_url not in current_channels:
        current_channels.append(channel_url)
        set_user_channels(message.from_user.id, current_channels)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_url} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    user_channels = get_user_channels(message.from_user.id)
    channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
    if len(user_channels) > 10:
        channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
    
    await message.answer(
        f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã:</b>\n{channels_list}",
        reply_markup=get_manage_channels_buttons(user_channels),
        parse_mode="HTML"
    )
    
    await state.clear()

@dp.message(lambda message: message.text == "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def get_top_news_today(message: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    await message.answer(
        "üìä <b>–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_top_news_initial_buttons(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤—ã—Ö callback-–∫–Ω–æ–ø–æ–∫
# --- –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò view_top_today_callback ---
@dp.callback_query(lambda call: call.data == "view_top_today")
async def view_top_today_callback(call: CallbackQuery):
    await call.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels = get_user_channels(call.from_user.id)
        
        if not channels:
            try:
                await call.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                    "–ù–∞–∂–º–∏—Ç–µ '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª—ã', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã.",
                    reply_markup=get_top_news_initial_buttons()
                )
            except Exception as e:
                if "message is not modified" in str(e).lower():
                    await call.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                else:
                    raise e
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
        try:
            await call.message.edit_text("‚è≥ –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                raise e
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        all_posts = []
        for channel_url in channels[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                posts = tg_parser.parse_channel(channel_url, 2)
                all_posts.extend(posts)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_url}: {e}")
                continue
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not all_posts:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            try:
                await call.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ö–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
                    "‚Ä¢ –ö–∞–Ω–∞–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ—Å—Ç–æ–≤",
                    reply_markup=get_top_news_initial_buttons()
                )
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        all_posts.sort(key=lambda x: x.get('date', ''), reverse=True)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –ø–æ—Å—Ç–∞
        posts_to_show = all_posts[:4]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏"
        top_news_cache[call.from_user.id] = {
            'all_posts': all_posts,
            'shown_posts': posts_to_show,
            'channels': channels,
            'per_batch': 4,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.edit_text("‚úÖ –í–æ—Ç —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                raise e
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control
        for i, post in enumerate(posts_to_show):
            try:
                post_id = f"top_{call.from_user.id}_{i}"
                news_cache[post_id] = post
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                title = clean_html(post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                text = clean_html(post.get('text', ''))
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                if len(text) > 300:
                    text = text[:300] + "..."
                
                caption = f"üì¢ <b>{title}</b>\n\n"
                if text:
                    caption += f"üí¨ {text}\n\n"
                caption += f"üìç –ö–∞–Ω–∞–ª: @{post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                caption += f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                if post.get('image_url'):
                    try:
                        await call.message.answer_photo(
                            photo=post['image_url'],
                            caption=caption,
                            parse_mode="HTML"
                        )
                    except Exception as photo_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {photo_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await call.message.answer(caption, parse_mode="HTML")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await call.message.answer(caption, parse_mode="HTML")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(posts_to_show) - 1:
                    await asyncio.sleep(1.5) # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
                continue
        
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–ù–û–ü–ö–ò "–ï–©–ï –ù–û–í–û–°–¢–ò" ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –ø–æ—Å—Ç—ã
        remaining_posts = len(all_posts) - len(posts_to_show)
        
        if remaining_posts > 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏"
            await call.message.answer(
                f"üîÑ –ü–æ–∫–∞–∑–∞–Ω–æ {len(posts_to_show)} –∏–∑ {len(all_posts)}. –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining_posts}.",
                reply_markup=get_top_news_buttons()
            )
        else:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.answer("‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã!", reply_markup=get_top_news_initial_buttons())
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        try:
            await call.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}",
                reply_markup=get_top_news_initial_buttons()
            )
        except Exception as edit_error:
            if "message is not modified" not in str(edit_error).lower():
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π")
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò view_top_today_callback ---

@dp.callback_query(lambda call: call.data == "more_top_news")
async def more_top_news_callback(call: CallbackQuery):
    user_id = call.from_user.id
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –µ—â—ë –Ω–æ–≤–æ—Å—Ç–∏...")

    try:
        cache = top_news_cache.get(user_id)
        if not cache:
            try:
                await call.message.edit_text(
                    "‚ùå –°–µ—Å—Å–∏—è —Å —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ 'üëÅÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è' –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_top_news_initial_buttons()
                )
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e
            return

        all_posts = cache.get('all_posts', [])
        shown_posts = cache.get('shown_posts', [])

        start_index = len(shown_posts)
        batch_size = cache.get('per_batch', 4)
        next_posts = all_posts[start_index:start_index + batch_size]

        if not next_posts:
            try:
                await call.message.edit_text(
                    "‚úÖ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
                    reply_markup=get_top_news_initial_buttons()
                )
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e
            return

        for i, post in enumerate(next_posts, start=start_index):
            try:
                post_id = f"top_{user_id}_{i}"
                news_cache[post_id] = post

                title = clean_html(post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                text = clean_html(post.get('text', ''))

                if len(text) > 300:
                    text = text[:300] + "..."

                caption = f"üì¢ <b>{title}</b>\n\n"
                if text:
                    caption += f"üí¨ {text}\n\n"
                caption += f"üìç –ö–∞–Ω–∞–ª: @{post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                caption += f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"

                if post.get('image_url'):
                    try:
                        await call.message.answer_photo(
                            photo=post['image_url'],
                            caption=caption,
                            parse_mode="HTML"
                        )
                    except Exception as photo_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {photo_error}")
                        await call.message.answer(caption, parse_mode="HTML")
                else:
                    await call.message.answer(caption, parse_mode="HTML")

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(next_posts) - 1:
                    await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –∫—ç—à–µ
        cache['shown_posts'] = shown_posts + next_posts
        top_news_cache[user_id] = cache

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏"
        try:
            await call.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
        remaining_posts = len(all_posts) - len(cache['shown_posts'])
        
        if remaining_posts > 0:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç—ã –µ—â—ë –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â—ë –Ω–æ–≤–æ—Å—Ç–∏"
            await call.message.answer(
                f"üîÑ –ü–æ–∫–∞–∑–∞–Ω–æ {len(cache['shown_posts'])} –∏–∑ {len(all_posts)} –ø–æ—Å—Ç–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining_posts}.",
                reply_markup=get_top_news_buttons()
            )
        else:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.answer(
                "‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã!",
                reply_markup=get_top_news_initial_buttons()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        try:
            await call.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.",
                reply_markup=get_top_news_initial_buttons()
            )
        except Exception as edit_error:
            if "message is not modified" not in str(edit_error).lower():
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

@dp.callback_query(lambda call: call.data == "manage_channels")
async def manage_channels_callback(call: CallbackQuery):
    user_channels = get_user_channels(call.from_user.id)
    
    if not user_channels:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª."
    else:
        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
        if len(user_channels) > 10:
            channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
        message_text = f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã:</b>\n{channels_list}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ "message is not modified"
    try:
        await call.message.edit_text(
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n{message_text}",
            reply_markup=get_manage_channels_buttons(user_channels),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" in str(e).lower():
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
            raise e
    
    await call.answer()

@dp.callback_query(lambda call: call.data.startswith("delete_channel_"))
async def delete_channel_callback(call: CallbackQuery):
    try:
        channel_index = int(call.data.split("_")[-1])
        current_channels = get_user_channels(call.from_user.id)
        
        if 0 <= channel_index < len(current_channels):
            removed_channel = current_channels.pop(channel_index)
            set_user_channels(call.from_user.id, current_channels)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            user_channels = get_user_channels(call.from_user.id)
            if not user_channels:
                message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª."
            else:
                channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
                if len(user_channels) > 10:
                    channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
                message_text = f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã:</b>\n{channels_list}"
            
            try:
                await call.message.edit_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª {removed_channel} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                    f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n{message_text}",
                    reply_markup=get_manage_channels_buttons(user_channels),
                    parse_mode="HTML"
                )
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e
        else:
            await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞.")
    except ValueError:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
    
    await call.answer()

@dp.callback_query(lambda call: call.data.startswith("channels_page_"))
async def channels_page_callback(call: CallbackQuery):
    try:
        page = int(call.data.split("_")[-1])
        user_channels = get_user_channels(call.from_user.id)
        
        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
        if len(user_channels) > 10:
            channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
        
        try:
            await call.message.edit_text(
                f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã:</b>\n{channels_list}",
                reply_markup=get_manage_channels_buttons(user_channels, page),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                raise e
    except ValueError:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    await call.answer()

@dp.callback_query(lambda call: call.data == "cancel_channel_operation")
async def cancel_channel_operation_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    
    user_channels = get_user_channels(call.from_user.id)
    if not user_channels:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª."
    else:
        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
        if len(user_channels) > 10:
            channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
        message_text = f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã:</b>\n{channels_list}"
    
    try:
        await call.message.edit_text(
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n{message_text}",
            reply_markup=get_manage_channels_buttons(user_channels),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise e
    await call.answer()

@dp.callback_query(lambda call: call.data == "back_to_top_menu")
async def back_to_top_menu_callback(call: CallbackQuery):
    try:
        await call.message.edit_text(
            "üìä <b>–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_top_news_initial_buttons(),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise e
    await call.answer()

@dp.callback_query(lambda call: call.data.startswith("theme_"))
async def theme_callback(call: CallbackQuery):
    theme = call.data.split("_")[1]
    theme_names = {
        "python": "Python",
        "js": "JavaScript",
        "ai": "AI/ML",
        "web": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    }

    theme_name = theme_names.get(theme, theme)
    try:
        await call.message.edit_text(f"üîç –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {theme_name}")
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise e

    try:
        include_keys, exclude_keys = get_user_filters(call.from_user.id)
        per_batch = get_user_news_count(call.from_user.id)
        news_list = parser.search_by_theme(theme, limit=per_batch * 2)
        news_list = apply_filters(news_list, include_keys, exclude_keys)[:per_batch]

        if not news_list:
            try:
                await call.message.edit_text(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ: {theme_name}",
                    reply_markup=get_main_menu(),
                )
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ"
        await call.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        for i, news in enumerate(news_list):
            news_id = f"{theme}_{i}"
            news_cache[news_id] = news

            msg = format_news_message(news)
            await call.message.answer(
                msg,
                reply_markup=get_news_buttons(news["link"], news_id),
                parse_mode="HTML"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(news_list) - 1:
                await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ {theme}: {e}")
        try:
            await call.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ: {theme_name}",
                reply_markup=get_main_menu(),
            )
        except Exception as edit_error:
            if "message is not modified" not in str(edit_error).lower():
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")

@dp.callback_query(lambda call: call.data.startswith("full_"))
async def show_full_article(call: CallbackQuery):
    news_id = call.data.split("_", 1)[1]

    if news_id not in news_cache:
        await call.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    news = news_cache[news_id]
    await call.answer("üìñ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é...")

    loading_msg = await call.message.answer("üìñ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é...")

    try:
        result = parser.parse_full_article(news["link"])

        if result["success"]:
            await loading_msg.delete()

            full_text = result["content"]
            title = clean_html(result.get("title", news.get("title", "")))

            if len(full_text) > 4000:
                parts = []
                while full_text:
                    part = full_text[:4000]
                    last_space = part.rfind(" ")
                    if last_space != -1 and len(full_text) > 4000:
                        part = full_text[:last_space]
                        full_text = full_text[last_space:].strip()
                    else:
                        full_text = ""
                    parts.append(part)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await call.message.answer(
                    f"üìñ <b>{title}</b>\n\n{parts[0]}",
                    parse_mode="HTML",
                    reply_markup=get_full_article_buttons(news["link"]),
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for i, part in enumerate(parts[1:], 1):
                    await call.message.answer(part, parse_mode="HTML")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                    if i < len(parts) - 1:
                        await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            else:
                await call.message.answer(
                    f"üìñ <b>{title}</b>\n\n{full_text}",
                    parse_mode="HTML",
                    reply_markup=get_full_article_buttons(news["link"]),
                )
        else:
            try:
                await loading_msg.edit_text(f"‚ùå {result['error']}")
            except Exception as e:
                if "message is not modified" not in str(e).lower():
                    raise e

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {e}")
        try:
            await loading_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏.")
        except Exception as edit_error:
            if "message is not modified" not in str(edit_error).lower():
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")

@dp.callback_query(lambda call: call.data.startswith("tldr_"))
async def tldr_callback(call: CallbackQuery):
    news_id = call.data.split("_", 1)[1]
    if news_id not in news_cache:
        await call.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    news = news_cache[news_id]
    title = clean_html(news.get('title', ''))
    base_text = news.get('text') or news.get('summary') or title
    summary = summarize_text(base_text, max_sentences=3)
    await call.message.answer(
        f"üìù <b>–ö—Ä–∞—Ç–∫–æ:</b> {summary}",
        parse_mode="HTML",
        reply_markup=get_post_action_buttons(news.get('link', ''), news_id)
    )
    await call.answer()

@dp.callback_query(lambda call: call.data.startswith("save_"))
async def save_news_callback(call: CallbackQuery):
    news_id = call.data.split("_", 1)[1]

    if news_id not in news_cache:
        await call.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return

    try:
        news = news_cache[news_id]
        save_news(call.from_user.id, news["title"], news["link"])
        await call.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

@dp.message(lambda message: message.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message):
    try:
        favorites = get_favorites(message.from_user.id)
        msg = format_favorites_list(favorites)
        await message.answer(msg, parse_mode="HTML", reply_markup=get_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
            reply_markup=get_main_menu(),
        )

@dp.message(Command("export_fav"))
async def export_favorites(message: Message):
    try:
        favorites = get_favorites(message.from_user.id)
        if not favorites:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        # –ì–æ—Ç–æ–≤–∏–º Markdown —ç–∫—Å–ø–æ—Ä—Ç
        lines = ["# –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n"]
        for i, (title, url) in enumerate(favorites, 1):
            clean_title = clean_html(title)
            lines.append(f"{i}. [{clean_title}]({url})")
        content = "\n".join(lines)
        await message.answer_document(
            document=types.BufferedInputFile(content.encode('utf-8'), filename="favorites.md"),
            caption="–≠–∫—Å–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (Markdown)"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

@dp.message(Command("digest"))
async def one_time_digest(message: Message):
    try:
        include_keys, exclude_keys = get_user_filters(message.from_user.id)
        per_batch = get_user_news_count(message.from_user.id)
        channels = get_user_channels(message.from_user.id)
        all_posts = []
        for channel_url in channels[:5]:
            try:
                posts = tg_parser.parse_channel(channel_url, 50)
                all_posts.extend(posts)
            except Exception:
                continue
        # –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        all_posts.sort(key=lambda x: x.get('date', ''), reverse=True)
        filtered = apply_filters(all_posts, include_keys, exclude_keys)[: per_batch * 3]
        if not filtered:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            return
        await message.answer(f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç: {len(filtered)} –ø–æ—Å—Ç–æ–≤")
        for idx, post in enumerate(filtered):
            try:
                title = clean_html(post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                text = clean_html(post.get('text', ''))
                if len(text) > 300:
                    text = text[:300] + "..."
                caption = f"üì¢ <b>{title}</b>\n\n"
                if text:
                    caption += f"üí¨ {text}\n\n"
                caption += f"üìç –ö–∞–Ω–∞–ª: @{post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                caption += f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
                if post.get('image_url'):
                    await message.answer_photo(post['image_url'], caption=caption, parse_mode="HTML")
                else:
                    await message.answer(caption, parse_mode="HTML")
                if idx < len(filtered) - 1:
                    await asyncio.sleep(1.2)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {e}")
                continue
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")

@dp.message(lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    try:
        await message.answer(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            parse_mode="HTML",
            reply_markup=get_statistics_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def show_notifications(message: Message):
    try:
        notifications = get_unread_notifications(message.from_user.id)
        if not notifications:
            await message.answer(
                "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = notifications[0]
        formatted = format_notification_message(notification)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"notif_read_{notification['id']}")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"notif_delete_{notification['id']}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"notif_prev_{notification['id']}")],
                [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"notif_next_{notification['id']}")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        )
        
        await message.answer(
            formatted,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@dp.message(Command("recs"))
async def get_recommendations_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    try:
        await message.answer(
            "ü§ñ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_recommendations_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

@dp.message(Command("archive"))
async def show_archive(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–æ–º –ø–æ—Å—Ç–æ–≤."""
    try:
        await message.answer(
            "üìö <b>–ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_archive_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞.")

@dp.message(Command("search_advanced"))
async def advanced_search(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    try:
        await message.answer(
            "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            parse_mode="HTML",
            reply_markup=get_search_advanced_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

@dp.callback_query(lambda call: call.data == "back_to_main")
async def back_to_main_callback(call: CallbackQuery):
    try:
        await call.message.delete()
    except:
        pass
    
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await call.answer()

@dp.callback_query(lambda call: call.data == "back_to_main_from_article")
async def back_to_main_from_article_callback(call: CallbackQuery):
    try:
        await call.message.delete()
    except:
        pass
    
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await call.answer()

@dp.callback_query(lambda call: call.data.startswith("stats_"))
async def statistics_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        stats_type = call.data.split("_")[1]
        
        if stats_type == "general":
            await show_general_statistics(call)
        elif stats_type == "activity":
            await show_activity_statistics(call)
        elif stats_type == "tags":
            await show_tags_statistics(call)
        elif stats_type == "sources":
            await show_sources_statistics(call)
        elif stats_type == "export":
            await show_export_options(call)
        else:
            await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def show_general_statistics(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_stats = get_user_stats(call.from_user.id)
        summary = generate_activity_summary(user_stats)
        
        await call.message.edit_text(
            summary,
            parse_mode="HTML",
            reply_markup=get_statistics_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def show_activity_statistics(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        await call.message.edit_text(
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º.",
            parse_mode="HTML",
            reply_markup=get_statistics_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def show_tags_statistics(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º."""
    try:
        popular_tags = get_popular_tags(10)
        if not popular_tags:
            await call.message.edit_text(
                "üè∑Ô∏è <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏</b>\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–∞—Ö.",
                parse_mode="HTML",
                reply_markup=get_statistics_buttons()
            )
            return
        
        tags_text = "üè∑Ô∏è <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:</b>\n\n"
        for i, tag in enumerate(popular_tags, 1):
            tags_text += f"{i}. {tag['name']}: {tag['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
        
        await call.message.edit_text(
            tags_text,
            parse_mode="HTML",
            reply_markup=get_statistics_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def show_sources_statistics(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º."""
    try:
        user_stats = get_user_stats(call.from_user.id)
        favorite_sources = user_stats.get('favorite_sources', [])
        
        if not favorite_sources:
            await call.message.edit_text(
                "üì± <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.",
                parse_mode="HTML",
                reply_markup=get_statistics_buttons()
            )
            return
        
        sources_text = "üì± <b>–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n\n"
        for i, (source, count) in enumerate(favorite_sources, 1):
            sources_text += f"{i}. {source}: {count} –ø–æ—Å—Ç–æ–≤\n"
        
        await call.message.edit_text(
            sources_text,
            parse_mode="HTML",
            reply_markup=get_statistics_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def show_export_options(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        await call.message.edit_text(
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:",
            parse_mode="HTML",
            reply_markup=get_export_format_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞")

@dp.callback_query(lambda call: call.data.startswith("export_"))
async def export_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    try:
        export_format = call.data.split("_")[1]
        
        if export_format == "md":
            await export_data(call, "markdown")
        elif export_format == "csv":
            await export_data(call, "csv")
        elif export_format == "json":
            await export_data(call, "json")
        elif export_format == "txt":
            await export_data(call, "text")
        else:
            await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

async def export_data(call: CallbackQuery, format_type: str):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    try:
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        favorites = get_favorites(user_id)
        user_stats = get_user_stats(user_id)
        view_history = get_view_history(user_id, 100)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if format_type == "markdown":
            content = export_to_markdown(favorites, view_history, user_stats)
            filename = "export.md"
            mime_type = "text/markdown"
        elif format_type == "csv":
            content = export_to_csv(favorites, view_history, user_stats)
            filename = "export.csv"
            mime_type = "text/csv"
        elif format_type == "json":
            content = export_to_json(favorites, view_history, user_stats)
            filename = "export.json"
            mime_type = "application/json"
        elif format_type == "text":
            content = export_to_markdown(favorites, view_history, user_stats)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º markdown –∫–∞–∫ —Ç–µ–∫—Å—Ç
            filename = "export.txt"
            mime_type = "text/plain"
        else:
            await call.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await call.message.answer_document(
            document=types.BufferedInputFile(
                content.encode('utf-8'), 
                filename=filename
            ),
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ({format_type.upper()})"
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        add_export_record(user_id, format_type, len(content.encode('utf-8')))
        
        await call.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.callback_query(lambda call: call.data == "schedule_digest")
async def schedule_digest_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."""
    try:
        schedule = get_digest_schedule(call.from_user.id)
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if schedule['is_active'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        time_str = schedule['time'] if schedule['time'] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        days_str = ", ".join(schedule['days']) if schedule['days'] else "–í—Å–µ –¥–Ω–∏"
        
        await call.message.edit_text(
            f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {time_str}\n"
            f"–î–Ω–∏: {days_str}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_digest_schedule_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@dp.callback_query(lambda call: call.data == "digest_set_time")
async def digest_set_time_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    try:
        await call.message.edit_text(
            "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã?",
            parse_mode="HTML",
            reply_markup=get_time_selection_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏")

@dp.callback_query(lambda call: call.data.startswith("time_"))
async def time_selection_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    try:
        time_str = call.data.split("_")[1]
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = get_digest_schedule(user_id)
        current_days = schedule.get('days', [])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        set_digest_schedule(user_id, time_str, current_days, True)
        
        await call.message.edit_text(
            f"‚úÖ <b>–í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –≤ {time_str}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏", callback_data="digest_set_days")],
                    [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="schedule_digest")],
                ]
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏")

@dp.callback_query(lambda call: call.data == "digest_set_days")
async def digest_set_days_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    try:
        await call.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏</b>\n\n"
            "–í –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã?",
            parse_mode="HTML",
            reply_markup=get_days_selection_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–Ω–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–Ω–µ–π")

@dp.callback_query(lambda call: call.data.startswith("day_"))
async def day_selection_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    try:
        day_code = call.data.split("_")[1]
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = get_digest_schedule(user_id)
        current_time = schedule.get('time', '09:00')
        current_days = schedule.get('days', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –¥–µ–Ω—å
        if day_code == "all":
            new_days = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ –¥–Ω–∏"
        elif day_code in current_days:
            new_days = [d for d in current_days if d != day_code]
        else:
            new_days = current_days + [day_code]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        set_digest_schedule(user_id, current_time, new_days, True)
        
        days_str = ", ".join(new_days) if new_days else "–í—Å–µ –¥–Ω–∏"
        await call.message.edit_text(
            f"‚úÖ <b>–î–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã:\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
            f"üìÖ –î–Ω–∏: {days_str}\n\n"
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="schedule_digest")],
                ]
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω–µ–π")

@dp.callback_query(lambda call: call.data == "digest_enable")
async def digest_enable_callback(call: CallbackQuery):
    """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã."""
    try:
        user_id = call.from_user.id
        schedule = get_digest_schedule(user_id)
        
        if not schedule.get('time'):
            await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞!")
            return
        
        # –í–∫–ª—é—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã
        set_digest_schedule(user_id, schedule['time'], schedule.get('days', []), True)
        
        await call.answer("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω\n"
            f"–í—Ä–µ–º—è: {schedule['time']}\n"
            f"–î–Ω–∏: {', '.join(schedule.get('days', [])) or '–í—Å–µ –¥–Ω–∏'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            parse_mode="HTML",
            reply_markup=get_digest_schedule_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")

@dp.callback_query(lambda call: call.data == "digest_disable")
async def digest_disable_callback(call: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã."""
    try:
        user_id = call.from_user.id
        schedule = get_digest_schedule(user_id)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã
        set_digest_schedule(user_id, schedule.get('time', '09:00'), schedule.get('days', []), False)
        
        await call.answer("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
            f"–í—Ä–µ–º—è: {schedule.get('time', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            f"–î–Ω–∏: {', '.join(schedule.get('days', [])) or '–í—Å–µ –¥–Ω–∏'}\n\n"
            f"–î–∞–π–¥–∂–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /digest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é.",
            parse_mode="HTML",
            reply_markup=get_digest_schedule_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")

@dp.callback_query(lambda call: call.data == "digest_test")
async def digest_test_callback(call: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç."""
    try:
        await call.answer("üì∞ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...")
        await scheduler.send_instant_digest(call.from_user.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

@dp.callback_query(lambda call: call.data.startswith("rate_"))
async def rating_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ—Å—Ç–æ–≤."""
    try:
        if call.data == "rate_cancel":
            await call.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        parts = call.data.split("_")
        if len(parts) >= 3:
            post_id = parts[1]
            rating = int(parts[2])
            
            if 1 <= rating <= 5:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                add_post_rating(call.from_user.id, post_id, rating)
                await call.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating}‚≠ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            else:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")

@dp.callback_query(lambda call: call.data.startswith("comment_"))
async def comment_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º."""
    try:
        action = call.data.split("_")[1]
        post_id = call.data.split("_")[2] if len(call.data.split("_")) > 2 else None
        
        if action == "add" and post_id:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await call.message.answer(
                "üí¨ <b>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É:",
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º post_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await call.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å post_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            
        elif action == "show" and post_id:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
            comments = get_post_comments(post_id)
            if not comments:
                await call.answer("üí¨ –ö —ç—Ç–æ–º—É –ø–æ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                return
            
            comments_text = "üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É:</b>\n\n"
            for i, comment in enumerate(comments, 1):
                username = comment['username']
                text = comment['comment']
                rating = "‚≠ê" * comment['rating'] if comment['rating'] > 0 else ""
                date = comment['created_at']
                
                comments_text += f"{i}. <b>{username}</b> {rating}\n"
                comments_text += f"   {text}\n"
                comments_text += f"   üìÖ {date}\n\n"
            
            await call.message.answer(
                comments_text,
                parse_mode="HTML"
            )
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

@dp.callback_query(lambda call: call.data.startswith("recs_"))
async def recommendations_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    try:
        action = call.data.split("_")[1]
        
        if action == "get":
            await get_user_recommendations(call)
        elif action == "settings":
            await show_recommendations_settings(call)
        elif action == "history":
            await show_recommendations_history(call)
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

async def get_user_recommendations(call: CallbackQuery):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_recommendations(user_id, 5)
        
        if not recommendations:
            await call.message.edit_text(
                "ü§ñ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
                "–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç—å –∏—Ö!",
                parse_mode="HTML",
                reply_markup=get_recommendations_buttons()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recs_text = "ü§ñ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n"
        for i, rec in enumerate(recommendations, 1):
            title = clean_html(rec['title'])
            reason = rec['reason']
            score = rec['score']
            
            recs_text += f"{i}. <b>{title}</b>\n"
            recs_text += f"   üí° {reason}\n"
            recs_text += f"   üìä –û—Ü–µ–Ω–∫–∞: {score}\n\n"
        
        await call.message.edit_text(
            recs_text,
            parse_mode="HTML",
            reply_markup=get_recommendations_buttons()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

async def show_recommendations_settings(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    try:
        await call.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            parse_mode="HTML",
            reply_markup=get_recommendations_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

async def show_recommendations_history(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    try:
        await call.message.edit_text(
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            parse_mode="HTML",
            reply_markup=get_recommendations_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

@dp.callback_query(lambda call: call.data.startswith("notif_"))
async def notification_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        action = call.data.split("_")[1]
        notification_id = int(call.data.split("_")[2]) if len(call.data.split("_")) > 2 else None
        
        if action == "read" and notification_id:
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            mark_notification_read(notification_id)
            await call.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            await show_next_notification(call)
            
        elif action == "delete" and notification_id:
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            delete_notification(notification_id)
            await call.answer("üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            await show_next_notification(call)
            
        elif action == "prev" and notification_id:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await show_previous_notification(call, notification_id)
            
        elif action == "next" and notification_id:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await show_next_notification(call, notification_id)
            
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def show_next_notification(call: CallbackQuery, current_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    try:
        user_id = call.from_user.id
        notifications = get_unread_notifications(user_id)
        
        if not notifications:
            await call.message.edit_text(
                "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if current_id:
            current_index = next((i for i, n in enumerate(notifications) if n['id'] == current_id), -1)
            next_index = (current_index + 1) % len(notifications)
        else:
            next_index = 0
        
        notification = notifications[next_index]
        formatted = format_notification_message(notification)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"notif_read_{notification['id']}")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"notif_delete_{notification['id']}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"notif_prev_{notification['id']}")],
                [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"notif_next_{notification['id']}")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        )
        
        await call.message.edit_text(
            formatted,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def show_previous_notification(call: CallbackQuery, current_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    try:
        user_id = call.from_user.id
        notifications = get_unread_notifications(user_id)
        
        if not notifications:
            await call.message.edit_text(
                "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        current_index = next((i for i, n in enumerate(notifications) if n['id'] == current_id), 0)
        prev_index = (current_index - 1) % len(notifications)
        
        notification = notifications[prev_index]
        formatted = format_notification_message(notification)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"notif_read_{notification['id']}")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"notif_delete_{notification['id']}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"notif_prev_{notification['id']}")],
                [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"notif_next_{notification['id']}")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        )
        
        await call.message.edit_text(
            formatted,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    user_channels = get_user_channels(message.from_user.id)
    news_count = get_user_news_count(message.from_user.id)
    include_keys, exclude_keys = get_user_filters(message.from_user.id)

    channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
    if len(user_channels) > 10:
        channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
    if not channels_list:
        channels_list = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"

    filters_text = (
        f"–í–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(include_keys) if include_keys else '‚Äî'}\n"
        f"–ò—Å–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(exclude_keys) if exclude_keys else '‚Äî'}"
    )

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n{channels_list}\n\n"
        f"<b>–†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏:</b> {news_count}\n"
        f"<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n{filters_text}",
        parse_mode="HTML",
        reply_markup=get_settings_buttons(news_count),
    )

@dp.callback_query(lambda call: call.data in ("settings_increase", "settings_decrease"))
async def settings_change_batch(call: CallbackQuery):
    current = get_user_news_count(call.from_user.id)
    if call.data.endswith("increase"):
        new_val = min(10, current + 1)
    else:
        new_val = max(1, current - 1)
    set_user_news_count(call.from_user.id, new_val)
    include_keys, exclude_keys = get_user_filters(call.from_user.id)
    user_channels = get_user_channels(call.from_user.id)
    channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
    if len(user_channels) > 10:
        channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
    if not channels_list:
        channels_list = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    filters_text = (
        f"–í–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(include_keys) if include_keys else '‚Äî'}\n"
        f"–ò—Å–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(exclude_keys) if exclude_keys else '‚Äî'}"
    )
    try:
        await call.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n{channels_list}\n\n"
            f"<b>–†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏:</b> {new_val}\n"
            f"<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n{filters_text}",
            parse_mode="HTML",
            reply_markup=get_settings_buttons(new_val),
        )
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise e
    await call.answer()

@dp.callback_query(lambda call: call.data == "settings_clear_filters")
async def settings_clear_filters(call: CallbackQuery):
    set_user_filters(call.from_user.id, [], [])
    await settings_change_batch(call)

@dp.callback_query(lambda call: call.data in ("settings_edit_include", "settings_edit_exclude"))
async def settings_edit_filters(call: CallbackQuery, state: FSMContext):
    mode = 'include' if call.data.endswith('include') else 'exclude'
    await state.update_data(edit_filter_mode=mode)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: python, ai, –≤–∞–∫–∞–Ω—Å–∏–∏).",
    )
    await call.answer()

@dp.message()
async def catch_filter_input(message: Message, state: FSMContext):
    data = await state.get_data()
    mode = data.get('edit_filter_mode')
    if not mode:
        return  # –Ω–µ –Ω–∞—à —Å–ª—É—á–∞–π
    raw = message.text or ''
    items = [x.strip() for x in raw.split(',') if x.strip()]
    include_keys, exclude_keys = get_user_filters(message.from_user.id)
    if mode == 'include':
        include_keys = items
    else:
        exclude_keys = items
    set_user_filters(message.from_user.id, include_keys, exclude_keys)
    await state.update_data(edit_filter_mode=None)
    await message.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.callback_query(lambda call: call.data == "settings_theme")
async def settings_theme_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
    try:
        current_theme = get_user_theme(call.from_user.id)
        theme_names = {
            'light': '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è',
            'dark': 'üåô –¢–µ–º–Ω–∞—è',
            'auto': 'üé® –ê–≤—Ç–æ'
        }
        current_name = theme_names.get(current_theme, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
        
        await call.message.edit_text(
            f"üé® <b>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {current_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
            parse_mode="HTML",
            reply_markup=get_theme_selection_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º")

@dp.callback_query(lambda call: call.data.startswith("theme_"))
async def theme_selection_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
    try:
        theme = call.data.split("_")[1]
        user_id = call.from_user.id
        
        if theme in ['light', 'dark', 'auto']:
            set_user_theme(user_id, theme)
            theme_names = {
                'light': '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è',
                'dark': 'üåô –¢–µ–º–Ω–∞—è',
                'auto': 'üé® –ê–≤—Ç–æ'
            }
            theme_name = theme_names.get(theme, theme)
            
            await call.answer(f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {theme_name}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await show_settings_from_callback(call)
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º—ã: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º—ã")

@dp.callback_query(lambda call: call.data == "settings_notifications")
async def settings_notifications_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        settings = get_user_notification_settings(call.from_user.id)
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['notifications_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        
        await call.message.edit_text(
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_notification_settings_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.callback_query(lambda call: call.data.startswith("notif_"))
async def notification_settings_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        action = call.data.split("_")[1]
        user_id = call.from_user.id
        
        if action == "enable":
            set_user_notification_settings(user_id, True)
            await call.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "disable":
            set_user_notification_settings(user_id, False)
            await call.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "important":
            await call.answer("üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
        elif action == "digest":
            await call.answer("üì∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_notification_settings_updated(call)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

async def show_notification_settings_updated(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        settings = get_user_notification_settings(call.from_user.id)
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['notifications_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        
        await call.message.edit_text(
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_notification_settings_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def show_settings_from_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ callback (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ–Ω—é)."""
    try:
        user_id = call.from_user.id
        user_channels = get_user_channels(user_id)
        news_count = get_user_news_count(user_id)
        include_keys, exclude_keys = get_user_filters(user_id)

        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in user_channels[:10]])
        if len(user_channels) > 10:
            channels_list += f"\n... –∏ –µ—â—ë {len(user_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"
        if not channels_list:
            channels_list = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"

        filters_text = (
            f"–í–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(include_keys) if include_keys else '‚Äî'}\n"
            f"–ò—Å–∫–ª—é—á–∞—é—â–∏–µ: {', '.join(exclude_keys) if exclude_keys else '‚Äî'}"
        )

        await call.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"<b>–í–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n{channels_list}\n\n"
            f"<b>–†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏:</b> {news_count}\n"
            f"<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n{filters_text}",
            parse_mode="HTML",
            reply_markup=get_settings_buttons(news_count),
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ callback: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.callback_query(lambda call: call.data.startswith("archive_"))
async def archive_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –ø–æ—Å—Ç–æ–≤."""
    try:
        action = call.data.split("_")[1]
        
        if action == "browse":
            await show_archive_browse(call)
        elif action == "search":
            await show_archive_search(call)
        elif action == "export":
            await show_archive_export(call)
        elif action == "clear":
            await show_archive_clear(call)
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞—Ä—Ö–∏–≤–æ–º")

async def show_archive_browse(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞."""
    try:
        await call.message.edit_text(
            "üìö <b>–ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–æ–≤</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.",
            parse_mode="HTML",
            reply_markup=get_archive_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞")

async def show_archive_search(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ –∞—Ä—Ö–∏–≤–µ."""
    try:
        await call.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –≤ –∞—Ä—Ö–∏–≤–µ</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö.",
            parse_mode="HTML",
            reply_markup=get_archive_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∏—Å–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

async def show_archive_export(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞."""
    try:
        await call.message.edit_text(
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.",
            parse_mode="HTML",
            reply_markup=get_archive_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞—Ä—Ö–∏–≤–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞")

async def show_archive_clear(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∞—Ä—Ö–∏–≤–∞."""
    try:
        await call.message.edit_text(
            "üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞.",
            parse_mode="HTML",
            reply_markup=get_archive_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–∏—Å—Ç–∫–∏")

@dp.callback_query(lambda call: call.data.startswith("search_"))
async def advanced_search_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    try:
        action = call.data.split("_")[1]
        
        if action == "date":
            await show_date_search(call)
        elif action == "author":
            await show_author_search(call)
        elif action == "tags":
            await show_tags_search(call)
        elif action == "combined":
            await show_combined_search(call)
        else:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

async def show_date_search(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ."""
    try:
        await call.message.edit_text(
            "üìÖ <b>–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=get_search_advanced_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

async def show_author_search(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É."""
    try:
        await call.message.edit_text(
            "üë§ <b>–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=get_search_advanced_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

async def show_tags_search(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º."""
    try:
        await call.message.edit_text(
            "üè∑Ô∏è <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–≥–∞–º.",
            parse_mode="HTML",
            reply_markup=get_search_advanced_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

async def show_combined_search(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫."""
    try:
        await call.message.edit_text(
            "üîç <b>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_search_advanced_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞")

@dp.callback_query(lambda call: call.data == "noop")
async def noop_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è."""
    await call.answer()

async def main():
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        await scheduler.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await scheduler.stop()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())