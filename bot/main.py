#!/usr/bin/env python3
"""
Telegram News Bot (–≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∏—Å–∫, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
"""

import asyncio
import logging
from datetime import datetime, timedelta, date
from typing import List, Dict, Any

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, BufferedInputFile
import aiohttp

from .config import BOT_TOKEN, TELEGRAM_CHANNELS
from .keyboards import (
    get_main_keyboard,
    get_main_menu,
    get_settings_keyboard,
    get_channels_keyboard,
    get_digest_keyboard,
    get_admin_keyboard,
    get_post_keyboard,
    get_top_news_buttons,
)
from .scheduler import NewsScheduler
from .admin import is_admin, get_users_statistics, send_message_to_all_users, send_message_to_user

from database.db import (
    init_db,
    add_user,
    get_user_channels,
    get_user_news_count,
    set_user_news_count,
    get_active_users,
    save_news,
    get_favorites,
    add_search_query,
    get_user_stats,
    add_view_history,
    get_url_by_token,
)
from parsers.telegram_parser import TelegramParser
from parsers.base_parser import BaseParser
from parsers.habr_parser import HabrParser

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
parser = TelegramParser()

# –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
from typing import Set
BROADCAST_ALL_WAITING: Set[int] = set()
BROADCAST_USER_WAITING: Set[int] = set()

MENU_TEXTS = {
    "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
    "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
    "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É",
    "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
    "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
}

async def _try_send_photo(message: Message, image_url: str, caption: str, reply_markup=None) -> bool:
    if not image_url:
        return False
    try:
        await message.answer_photo(photo=image_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=10) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="image.jpg")
                    await message.answer_photo(photo=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

async def _try_send_video(message: Message, video_url: str, caption: str, reply_markup=None) -> bool:
    if not video_url:
        return False
    try:
        await message.answer_video(video=video_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(video_url, timeout=15) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="video.mp4")
                    await message.answer_video(video=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

async def _try_send_animation(message: Message, animation_url: str, caption: str, reply_markup=None) -> bool:
    if not animation_url:
        return False
    try:
        await message.answer_animation(animation=animation_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
        return True
    except Exception:
        pass
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(animation_url, timeout=15) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    file = BufferedInputFile(content, filename="animation.gif")
                    await message.answer_animation(animation=file, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                    return True
    except Exception:
        return False
    return False

# ===== Helpers =====

def _to_date(date_str: str) -> date:
    try:
        return datetime.strptime(date_str, "%Y-%m-%d").date()
    except Exception:
        return date.today()

async def _collect_posts(days: int) -> List[Dict[str, Any]]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ days –¥–Ω–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (views)."""
    threshold = date.today() - timedelta(days=days - 1)
    all_posts: List[Dict[str, Any]] = []
    for channel_url in TELEGRAM_CHANNELS:
        try:
            posts = parser.parse_channel(channel_url, limit=60)
            for p in posts:
                p_date = _to_date(p.get("date", ""))
                if p_date >= threshold:
                    all_posts.append(p)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {channel_url}: {e}")
            continue
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (views), –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ
    all_posts.sort(key=lambda x: (x.get("views", 0), x.get("date", "")), reverse=True)
    return all_posts

# ===== Commands =====

@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    user_id = message.from_user.id
    add_user(user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ç–æ–ø, –ø–æ–∏—Å–∫, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –¥–∞–π–¥–∂–µ—Å—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /top, /digest, /settings, /help"
    )
    await message.answer(text, reply_markup=get_main_menu(), parse_mode="HTML")

@dp.message(Command("help"))
async def help_command(message: Message) -> None:
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "/top ‚Äî —Ç–æ–ø (–∑–∞ 1 –¥–µ–Ω—å, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)\n"
        "'–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏' ‚Äî —Ä–∞—Å—à–∏—Ä–∏—Ç –æ—Ö–≤–∞—Ç –Ω–∞ +1 –¥–µ–Ω—å\n"
        "'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏' ‚Äî –Ω–æ–≤—ã–µ –ø–æ –¥–∞—Ç–µ\n"
        "'–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É' ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É/–∑–∞–≥–æ–ª–æ–≤–∫—É\n"
        "'‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ' ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
    )
    await message.answer(text, parse_mode="HTML")

# ===== Text menu (reply keyboard) =====

@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def latest_news(message: Message) -> None:
    await message.answer("ÔøΩÔøΩ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr...")
    try:
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        posts = habr_parser.get_latest_news(limit=10)
        
        if not posts:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr")
            return
            
        limit = get_user_news_count(message.from_user.id)
        posts = posts[:limit]
        
        for p in posts:
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = p.get("link", "")
            summary = p.get("summary", "")
            date = p.get("date", "")
            
            caption = f"<b>{title}</b>\n\n{summary}\n\nüìÖ {date}\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: Habr"
            
            if link:
                try:
                    add_view_history(message.from_user.id, link, 0)
                except Exception:
                    pass
                    
            await message.answer(caption, parse_mode="HTML", reply_markup=get_post_keyboard(link))
        
        # –ö–Ω–æ–ø–∫–∞ "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="more_habr_news:10")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr", reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

@dp.message(F.text == "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def top_today(message: Message) -> None:
    await top_command(message)

# ===== Admin broadcast input handlers (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞) =====

@dp.message(lambda m: m.from_user is not None and m.from_user.id in BROADCAST_ALL_WAITING)
async def handle_broadcast_all(message: Message) -> None:
    if not is_admin(message.from_user.id):
        return
    text = (message.text or "").strip()
    BROADCAST_ALL_WAITING.discard(message.from_user.id)
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç. –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    result = await send_message_to_all_users(bot, text, admin_id=message.from_user.id)
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('sent',0)} | –û—à–∏–±–æ–∫: {result.get('errors',0)}")

@dp.message(lambda m: m.from_user is not None and m.from_user.id in BROADCAST_USER_WAITING)
async def handle_broadcast_user(message: Message) -> None:
    if not is_admin(message.from_user.id):
        return
    try:
        first_space = message.text.find(' ')
        target_id = int(message.text[:first_space])
        text = message.text[first_space+1:].strip()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 –ü—Ä–∏–≤–µ—Ç!")
        return
    BROADCAST_USER_WAITING.discard(message.from_user.id)
    result = await send_message_to_user(bot, target_id, text, admin_id=message.from_user.id)
    if result.get('success'):
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
async def ask_search_query(message: Message) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ IT –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ Habr:")

@dp.message(lambda m: (
    isinstance(getattr(m, 'text', None), str)
    and len(m.text.strip()) >= 3
    and not m.text.startswith('/')
    and m.text.strip() not in MENU_TEXTS
    and (m.from_user is None or (m.from_user.id not in BROADCAST_ALL_WAITING and m.from_user.id not in BROADCAST_USER_WAITING))
))
async def handle_search_query(message: Message) -> None:
    query = message.text.strip()
    add_search_query(message.from_user.id, query)
    
    await message.answer(f"üîç –ò—â—É IT –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query}</b>", parse_mode="HTML")
    
    try:
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        found = habr_parser.search_by_query(query, limit=10)
        
        if not found:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Habr –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
            return
            
        for p in found[:10]:
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = p.get("link", "")
            summary = p.get("summary", "")
            
            caption = f"<b>{title}</b>\n\n{summary}\n\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
            
            if link:
                try:
                    add_view_history(message.from_user.id, link, 0)
                except Exception:
                    pass
                    
            await message.answer(caption, parse_mode="HTML", reply_markup=get_post_keyboard(link))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Habr: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@dp.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message) -> None:
    items = get_favorites(message.from_user.id)
    if not items:
        await message.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ")
        return
    for title, url in items[:20]:
        await message.answer(f"<b>{title}</b>", parse_mode="HTML", reply_markup=get_post_keyboard(url))

@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message) -> None:
    stats = get_user_stats(message.from_user.id)
    text = (
        "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats.get('total_views', 0)}\n"
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats.get('total_saves', 0)}\n"
        f"–ü–æ–∏—Å–∫–æ–≤: {stats.get('total_searches', 0)}\n"
    )
    await message.answer(text, parse_mode="HTML")

# Callback –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "help")
async def help_callback(call: CallbackQuery) -> None:
    await call.answer()
    await help_command(call.message)

@dp.message(Command("top"))
async def top_command(message: Message) -> None:
    # –¢–æ–ø: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É (—Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å), –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–ï—â–µ"
    await message.answer("üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π...")
    posts = await _collect_posts(days=1)
    if not posts:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    user_limit = get_user_news_count(message.from_user.id)
    posts_to_show = posts[: max(5, user_limit)]
    for p in posts_to_show:
        title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = p.get("link", "")
        channel = p.get("channel", "?")
        views = p.get("views", 0)
        image = p.get("image_url", "")
        video = p.get("video_url", "")
        anim = p.get("animation_url", "")
        caption = f"<b>{title}</b>\nüì∫ {channel}   üëÅÔ∏è {views}"
        if link:
            try:
                add_view_history(message.from_user.id, link, 0)
            except Exception:
                pass
        # –ü–æ—Ä—è–¥–æ–∫: –≤–∏–¥–µ–æ ‚Üí –≥–∏—Ñ ‚Üí —Ñ–æ—Ç–æ ‚Üí —Ç–µ–∫—Å—Ç
        if await _try_send_video(message, video, caption, reply_markup=get_post_keyboard(link)):
            continue
        if await _try_send_animation(message, anim, caption, reply_markup=get_post_keyboard(link)):
            continue
        if await _try_send_photo(message, image, caption, reply_markup=get_post_keyboard(link)):
            continue
        await message.answer(caption, parse_mode="HTML", reply_markup=get_post_keyboard(link))
    # –ö–Ω–æ–ø–∫–∞ –µ—â–µ
    kb = get_top_news_buttons(more_callback_data="more_top_news:1")
    await message.answer("–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ 1 –¥–µ–Ω—å", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("top_news"))
async def top_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    await top_command(call.message)

@dp.callback_query(lambda c: c.data.startswith("more_top_news"))
async def more_top_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    try:
        parts = call.data.split(":")
        prev_days = int(parts[1]) if len(parts) > 1 else 1
        days = min(prev_days + 1, 7)
        await call.message.edit_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        posts = await _collect_posts(days=days)
        if not posts:
            await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.")
            return
        user_limit = get_user_news_count(call.from_user.id)
        posts_to_show = posts[: max(5, user_limit)]
        for p in posts_to_show:
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = p.get("link", "")
            channel = p.get("channel", "?")
            views = p.get("views", 0)
            image = p.get("image_url", "")
            video = p.get("video_url", "")
            anim = p.get("animation_url", "")
            caption = f"<b>{title}</b>\nüì∫ {channel}   üëÅÔ∏è {views}"
            if link:
                try:
                    add_view_history(call.from_user.id, link, 0)
                except Exception:
                    pass
            if await _try_send_video(call.message, video, caption, reply_markup=get_post_keyboard(link)):
                continue
            if await _try_send_animation(call.message, anim, caption, reply_markup=get_post_keyboard(link)):
                continue
            if await _try_send_photo(call.message, image, caption, reply_markup=get_post_keyboard(link)):
                continue
            await call.message.answer(caption, parse_mode="HTML", reply_markup=get_post_keyboard(link))
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(f"–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {days} –¥.", reply_markup=get_top_news_buttons(more_callback_data=f"more_top_news:{days}"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

# ===== Settings =====

@dp.callback_query(lambda c: c.data == "settings")
async def settings_callback(call: CallbackQuery) -> None:
    await call.answer()
    await show_settings(call.message)

async def show_settings(message: Message) -> None:
    uid = message.from_user.id
    news_count = get_user_news_count(uid)
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{news_count}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_settings_keyboard())

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_text_handler(message: Message) -> None:
    await show_settings(message)

@dp.callback_query(lambda c: c.data == "settings_news_count")
async def settings_news_count_callback(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    current = get_user_news_count(uid)
    text = (
        "üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5", callback_data="news_count_5")],
        [InlineKeyboardButton(text="10", callback_data="news_count_10")],
        [InlineKeyboardButton(text="15", callback_data="news_count_15")],
        [InlineKeyboardButton(text="20", callback_data="news_count_20")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")],
    ])
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("news_count_"))
async def news_count_set(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    new_val = int(call.data.split("_")[-1])
    set_user_news_count(uid, new_val)
    await call.message.edit_text(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_val}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )

@dp.callback_query(lambda c: c.data == "settings_channels")
async def settings_channels_callback(call: CallbackQuery) -> None:
    await call.answer()
    uid = call.from_user.id
    channels = get_user_channels(uid)
    text = "\n".join(["üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã</b>", "", *channels]) if channels else "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=get_channels_keyboard())

# ===== Digest =====

@dp.callback_query(lambda c: c.data == "digest")
async def digest_callback(call: CallbackQuery) -> None:
    await call.answer()
    await send_instant_digest(call.message)

async def send_instant_digest(message: Message) -> None:
    uid = message.from_user.id
    try:
        await message.answer("üìÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–π–¥–∂–µ—Å—Ç...")
        channels = get_user_channels(uid) or TELEGRAM_CHANNELS
        limit = get_user_news_count(uid)
        all_posts: List[Dict[str, Any]] = []
        for ch in channels[:5]:
            try:
                all_posts.extend(parser.parse_channel(ch, limit=limit))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {ch}: {e}")
        if not all_posts:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            return
        all_posts.sort(key=lambda x: (x.get("views", 0), x.get("date", "")), reverse=True)
        posts = all_posts[:limit]
        text = "üì∞ <b>–í–∞—à –¥–∞–π–¥–∂–µ—Å—Ç:</b>\n\n"
        for i, p in enumerate(posts, 1):
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            channel = p.get("channel", "?")
            views = p.get("views", 0)
            text += f"{i}. <b>{title}</b>\n   üì∫ {channel}   üëÅÔ∏è {views}\n\n"
        await message.answer(text, parse_mode="HTML", reply_markup=get_digest_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

# ===== Admin =====

async def show_admin_panel(message: Message) -> None:
    await message.answer("üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=get_admin_keyboard())

@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel_callback(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    await show_admin_panel(call.message)

@dp.message(Command("admin"))
@dp.message(Command("–∞–¥–º–∏–Ω"))
async def admin_command(message: Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    await show_admin_panel(message)

@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats_callback(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    try:
        stats_resp = await get_users_statistics(call.from_user.id)
        stats = stats_resp.get("stats", {}) if isinstance(stats_resp, dict) else {}
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
        )
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# Save favorite

@dp.callback_query(lambda c: c.data.startswith("save:"))
async def save_post(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":", 1)[1]
    link = get_url_by_token(token) or token
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –±–µ—Ä–µ–º –ø–æ–¥–ø–∏—Å—å
    title = (call.message.caption or call.message.text or "–°—Å—ã–ª–∫–∞").strip()
    save_news(call.from_user.id, title=title, url=link)
    await call.message.edit_reply_markup(reply_markup=get_post_keyboard(link))

# TLDR / FULL handlers (–ø—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
@dp.callback_query(lambda c: c.data.startswith("tldr:"))
async def tldr_handler(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":",1)[1]
    link = get_url_by_token(token) or token
    await _send_tldr(call.message, link)

@dp.callback_query(lambda c: c.data.startswith("full:"))
async def full_handler(call: CallbackQuery) -> None:
    await call.answer()
    token = call.data.split(":",1)[1]
    link = get_url_by_token(token) or token
    await _send_full_article(call.message, link)

# ===== Article helpers =====

def _choose_article_parser(url: str):
    u = (url or "").lower()
    if "habr.com" in u:
        return HabrParser()
    return BaseParser()

def _summarize_text(text: str, max_chars: int = 900) -> str:
    if not text:
        return ""
    # –ü—Ä–æ—Å—Ç–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    sentences = [s.strip() for s in text.replace("\n", " ").split(".") if s.strip()]
    summary = ". ".join(sentences[:5])
    if not summary:
        summary = text[:max_chars]
    if len(summary) > max_chars:
        summary = summary[:max_chars] + "..."
    return summary

async def _send_long_text(message: Message, text: str, header: str | None = None):
    from html import escape
    chunk_limit = 3800
    body = escape(text)
    if header:
        safe_header = escape(header)
        body = f"<b>{safe_header}</b>\n\n{body}"
    while body:
        chunk = body[:chunk_limit]
        await message.answer(chunk, parse_mode="HTML")
        body = body[chunk_limit:]

async def _send_tldr(message: Message, url: str):
    parser_obj = _choose_article_parser(url)
    res = parser_obj.parse_full_article(url)
    if not res.get("success"):
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}")
        return
    summary = _summarize_text(res.get("content", ""))
    title = res.get("title", "–ö—Ä–∞—Ç–∫–æ")
    await _send_long_text(message, summary, header=f"üìù {title}")

async def _send_full_article(message: Message, url: str):
    parser_obj = _choose_article_parser(url)
    res = parser_obj.parse_full_article(url)
    if not res.get("success"):
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}")
        return
    content = res.get("content", "")
    title = res.get("title", "–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è")
    await _send_long_text(message, content, header=f"üìñ {title}")

# ===== Admin broadcast =====

@dp.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast_menu(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    from .admin import get_broadcast_keyboard
    await call.message.edit_text("üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", parse_mode="HTML", reply_markup=get_broadcast_keyboard())

@dp.callback_query(lambda c: c.data == "admin_broadcast_all")
async def admin_broadcast_all(call: CallbackQuery, state=None) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    BROADCAST_ALL_WAITING.add(call.from_user.id)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

@dp.callback_query(lambda c: c.data == "admin_broadcast_user")
async def admin_broadcast_user(call: CallbackQuery) -> None:
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    BROADCAST_USER_WAITING.add(call.from_user.id)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–±–µ–ª —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data == "main_menu")
async def go_main_menu(call: CallbackQuery) -> None:
    await call.answer()
    await call.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

# ===== Habr "–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏" callback =====

@dp.callback_query(lambda c: c.data.startswith("more_habr_news"))
async def more_habr_news_callback(call: CallbackQuery) -> None:
    await call.answer()
    try:
        parts = call.data.split(":")
        offset = int(parts[1]) if len(parts) > 1 else 10
        
        await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr...")
        
        from parsers.habr_parser import HabrParser
        habr_parser = HabrParser()
        posts = habr_parser.get_more_news(offset=offset, limit=5)
        
        if not posts:
            await call.message.edit_text("‚ùå –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        for p in posts:
            title = p.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = p.get("link", "")
            summary = p.get("summary", "")
            date = p.get("date", "")
            
            caption = f"<b>{title}</b>\n\n{summary}\n\nüìÖ {date}\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: Habr"
            
            if link:
                try:
                    add_view_history(call.from_user.id, link, 0)
                except Exception:
                    pass
                    
            await call.message.answer(caption, parse_mode="HTML", reply_markup=get_post_keyboard(link))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
        next_offset = offset + 5
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data=f"more_habr_news:{next_offset}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await call.message.answer(f"–ü–æ–∫–∞–∑–∞–Ω—ã IT –Ω–æ–≤–æ—Å—Ç–∏ —Å Habr (—Å {offset+1} –ø–æ {offset+len(posts)})", reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

# Fallback

@dp.callback_query()
async def unknown_callback(call: CallbackQuery) -> None:
    await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {call.data}")

@dp.message()
async def handle_all_messages(message: Message) -> None:
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –º–µ–Ω—é –Ω–∏–∂–µ", reply_markup=get_main_keyboard())

async def main() -> None:
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    scheduler = NewsScheduler()
    scheduler.bot = bot
    await scheduler.setup_all_schedules()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())