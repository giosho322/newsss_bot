#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import logging
from datetime import datetime, timedelta
from typing import Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database.db import (
    get_digest_schedule, set_digest_schedule, get_user_channels,
    get_user_news_count, get_active_users
)
from parsers.telegram_parser import TelegramParser

logger = logging.getLogger(__name__)

class NewsScheduler:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.bot = None
        self.parser = TelegramParser()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def setup_all_schedules(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_active_users()
            
            for user_id in users:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                schedule = get_digest_schedule(user_id)
                
                if schedule and schedule.get('enabled', False):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                    time_str = schedule.get('time', '09:00')
                    days = schedule.get('days', [0, 1, 2, 3, 4, 5, 6])  # –í—Å–µ –¥–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –°–æ–∑–¥–∞–µ–º cron —Ç—Ä–∏–≥–≥–µ—Ä
                    hour, minute = map(int, time_str.split(':'))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                    for day in days:
                        job_id = f"digest_{user_id}_{day}"
                        self.scheduler.add_job(
                            func=self.send_digest,
                            trigger=CronTrigger(day_of_week=day, hour=hour, minute=minute),
                            args=[user_id],
                            id=job_id,
                            replace_existing=True
                        )
                    
                    logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {time_str}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")

    async def send_digest(self, user_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not self.bot:
                logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channels = get_user_channels(user_id)
            news_count = get_user_news_count(user_id)
            
            if not channels:
                logger.warning(f"–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–∞–Ω–∞–ª–æ–≤
            all_posts = []
            for channel_url in channels[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                try:
                    posts = self.parser.parse_channel(channel_url, news_count)
                    all_posts.extend(posts)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_url}: {e}")
                    continue
            
            if not all_posts:
                logger.warning(f"–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_posts.sort(key=lambda x: x.get('date', ''), reverse=True)
            posts_to_send = all_posts[:news_count]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            message = "üì∞ <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:</b>\n\n"
            
            for idx, post in enumerate(posts_to_send, 1):
                title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                channel = post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                message += f"{idx}. <b>{title}</b>\n"
                message += f"   üì∫ {channel}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            await self.bot.send_message(
                user_id, 
                message, 
                parse_mode="HTML"
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")

    async def send_instant_digest(self, user_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
        await self.send_digest(user_id)

    def set_digest_schedule(self, user_id: int, time_str: str, days: list, enable: bool = True):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            set_digest_schedule(user_id, time_str, days, enable)
            
            if enable:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                hour, minute = map(int, time_str.split(':'))
                
                for day in days:
                    job_id = f"digest_{user_id}_{day}"
                    self.scheduler.add_job(
                        func=self.send_digest,
                        trigger=CronTrigger(day_of_week=day, hour=hour, minute=minute),
                        args=[user_id],
                        id=job_id,
                        replace_existing=True
                    )
                
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {time_str}")
            else:
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                for day in days:
                    job_id = f"digest_{user_id}_{day}"
                    try:
                        self.scheduler.remove_job(job_id)
                    except:
                        pass
                
                logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")