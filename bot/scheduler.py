import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict
import pytz
from database.db import (
    get_digest_schedule, 
    get_user_channels, 
    get_user_filters, 
    get_user_news_count,
    add_notification,
    update_user_activity,
    get_active_users
)
from parsers.telegram_parser import TelegramParser
from bot.utils import apply_filters, clean_html

logger = logging.getLogger(__name__)

class NewsScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.tg_parser = TelegramParser()
        self.running = False
        self.tasks = []
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        asyncio.create_task(self._scheduler_loop())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(self._cleanup_loop())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.running = False
        for task in self.tasks:
            task.cancel()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.running:
            try:
                await self._check_and_send_digests()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        while self.running:
            try:
                await self._cleanup_old_data()
                await asyncio.sleep(3600)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(3600)
    
    async def _check_and_send_digests(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = get_active_users(24)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            
            for user_id in active_users:
                try:
                    await self._check_user_digest(user_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
    
    async def _check_user_digest(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            schedule = get_digest_schedule(user_id)
            if not schedule or not schedule['is_active']:
                return
            
            current_time = datetime.now()
            user_timezone = pytz.timezone('UTC')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                scheduled_time = datetime.strptime(schedule['time'], '%H:%M').time()
                current_user_time = current_time.astimezone(user_timezone).time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
                if self._should_send_digest(scheduled_time, current_user_time, schedule['days']):
                    await self._send_digest_to_user(user_id)
                    
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def _should_send_digest(self, scheduled_time, current_time, days) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç."""
        # –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if not days:
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        current_day = datetime.now().strftime('%A').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        if current_day not in [day.lower() for day in days]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (—Å –¥–æ–ø—É—Å–∫–æ–º –≤ 5 –º–∏–Ω—É—Ç)
        time_diff = abs((current_time.hour * 60 + current_time.minute) - 
                       (scheduled_time.hour * 60 + scheduled_time.minute))
        
        return time_diff <= 5
    
    async def _send_digest_to_user(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channels = get_user_channels(user_id)
            if not channels:
                return
            
            include_keys, exclude_keys = get_user_filters(user_id)
            per_batch = get_user_news_count(user_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã —Å–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            all_posts = []
            for channel_url in channels[:5]:
                try:
                    posts = self.tg_parser.parse_channel(channel_url, 20)
                    all_posts.extend(posts)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_url}: {e}")
                    continue
            
            if not all_posts:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            all_posts.sort(key=lambda x: x.get('date', ''), reverse=True)
            filtered_posts = apply_filters(all_posts, include_keys, exclude_keys)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_posts = filtered_posts[:per_batch * 2]
            
            if not digest_posts:
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await self.bot.send_message(
                user_id,
                f"üì∞ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ {len(digest_posts)} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤–∞—Å",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for i, post in enumerate(digest_posts):
                try:
                    title = clean_html(post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                    text = clean_html(post.get('text', ''))
                    
                    if len(text) > 300:
                        text = text[:300] + "..."
                    
                    caption = f"üì¢ <b>{title}</b>\n\n"
                    if text:
                        caption += f"üí¨ {text}\n\n"
                    caption += f"üìç –ö–∞–Ω–∞–ª: @{post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                    caption += f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
                    
                    if post.get('image_url'):
                        try:
                            await self.bot.send_photo(
                                user_id,
                                photo=post['image_url'],
                                caption=caption,
                                parse_mode="HTML"
                            )
                        except Exception:
                            await self.bot.send_message(user_id, caption, parse_mode="HTML")
                    else:
                        await self.bot.send_message(user_id, caption, parse_mode="HTML")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                    if i < len(digest_posts) - 1:
                        await asyncio.sleep(1.5)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {e}")
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                user_id,
                f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∫–∞–∑–∞–Ω–æ {len(digest_posts)} –ø–æ—Å—Ç–æ–≤.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /digest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.",
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_user_activity(user_id)
            
            logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def _cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Ç.–¥.
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def send_instant_digest(self, user_id: int, custom_channels: List[str] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            channels = custom_channels or get_user_channels(user_id)
            if not channels:
                await self.bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
                return
            
            include_keys, exclude_keys = get_user_filters(user_id)
            per_batch = get_user_news_count(user_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã
            all_posts = []
            for channel_url in channels[:5]:
                try:
                    posts = self.tg_parser.parse_channel(channel_url, 30)
                    all_posts.extend(posts)
                except Exception:
                    continue
            
            if not all_posts:
                await self.bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            all_posts.sort(key=lambda x: x.get('date', ''), reverse=True)
            filtered_posts = apply_filters(all_posts, include_keys, exclude_keys)[:per_batch * 3]
            
            if not filtered_posts:
                await self.bot.send_message(user_id, "–ü–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
                return
            
            await self.bot.send_message(
                user_id,
                f"üì∞ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
            for i, post in enumerate(filtered_posts):
                try:
                    title = clean_html(post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
                    text = clean_html(post.get('text', ''))
                    
                    if len(text) > 300:
                        text = text[:300] + "..."
                    
                    caption = f"üì¢ <b>{title}</b>\n\n"
                    if text:
                        caption += f"üí¨ {text}\n\n"
                    caption += f"üìç –ö–∞–Ω–∞–ª: @{post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                    caption += f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
                    
                    if post.get('image_url'):
                        try:
                            await self.bot.send_photo(
                                user_id,
                                photo=post['image_url'],
                                caption=caption,
                                parse_mode="HTML"
                            )
                        except Exception:
                            await self.bot.send_message(user_id, caption, parse_mode="HTML")
                    else:
                        await self.bot.send_message(user_id, caption, parse_mode="HTML")
                    
                    if i < len(filtered_posts) - 1:
                        await asyncio.sleep(1.2)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
                    continue
            
            await self.bot.send_message(
                user_id,
                f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await self.bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
    
    async def send_notification(self, user_id: int, notification_type: str, title: str, message: str, data: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            add_notification(user_id, notification_type, title, message, data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(
                user_id,
                f"üîî <b>{title}</b>\n\n{message}",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_important_news_notification(self, user_id: int, post: Dict, keywords: List[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏."""
        try:
            title = clean_html(post.get('title', '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å'))
            source = post.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            matched_keywords = [kw for kw in keywords if kw.lower() in title.lower()]
            
            message = (
                f"üö® <b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º!</b>\n\n"
                f"<b>{title}</b>\n\n"
                f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: @{source}\n"
                f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(matched_keywords)}\n\n"
                f"üîó <a href='{post.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
            )
            
            await self.send_notification(
                user_id,
                'important_news',
                '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å',
                message,
                post.get('link', '')
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
