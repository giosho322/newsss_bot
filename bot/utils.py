import re
from html import unescape
from typing import List, Dict, Tuple
from datetime import datetime, timedelta
import json
import csv
import io

_MD_IMAGE_PATTERN = re.compile(r'!\[([\s\S]*?)\]\(([\s\S]*?)\)', re.DOTALL)
_MD_LINK_PATTERN = re.compile(r'\[([\s\S]*?)\]\(([\s\S]*?)\)', re.DOTALL)
_MD_EMPTY_LINK_PATTERN = re.compile(r'\[\s*\]\(([\s\S]*?)\)', re.DOTALL)
_RAW_URL_PATTERN = re.compile(r'(https?://|www\.)\S+', re.IGNORECASE)
_TME_PATTERN = re.compile(r'\bt\.me/\S+', re.IGNORECASE)
_ONLY_BRACKETS_PATTERN = re.compile(r'^[\s\[\]\(\)]+$')
_MULTI_SPACES_PATTERN = re.compile(r'\s+')


def clean_html(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    clean = re.sub(r'<[^>]+>', '', text)
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏
    clean = unescape(clean)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = re.sub(r'\s+', ' ', clean).strip()
    
    return clean


def is_meaningful_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –∑–Ω–∞—á–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã).
    –ò—Å–ø–æ–ª—å–∑—É–µ–º, —á—Ç–æ–±—ã –æ—Ç—Å–µ—è—Ç—å –º—É—Å–æ—Ä –≤—Ä–æ–¥–µ "[](" –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    if not text:
        return False
    if _ONLY_BRACKETS_PATTERN.match(text):
        return False
    return re.search(r'[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]', text) is not None


def soft_clean_text(text: str) -> str:
    """–ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ URL/–ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å."""
    if not text:
        return ""
    text = unescape(text)
    # –£–¥–∞–ª—è–µ–º —è–≤–Ω—ã–µ URL (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫)
    text = _RAW_URL_PATTERN.sub('', text)
    text = _TME_PATTERN.sub('', text)
    # –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    text = _MULTI_SPACES_PATTERN.sub(' ', text).strip()
    return text

def format_news_message(news: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    title = clean_html(news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
    summary = clean_html(news.get('summary', ''))
    
    message = f"üì∞ <b>{title}</b>\n\n"
    
    if summary:
        if len(summary) > 300:
            summary = summary[:300] + "..."
        message += f"üí¨ {summary}\n\n"
    
    message += f"üîó <a href='{news.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
    
    return message

def format_favorites_list(favorites: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
    if not favorites:
        return "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
    
    message = "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n"
    
    for i, (title, link) in enumerate(favorites, 1):
        clean_title = clean_html(title)
        if len(clean_title) > 80:
            clean_title = clean_title[:80] + "..."
        message += f"{i}. {clean_title}\n"
        message += f"   üîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n\n"
    
    return message


def summarize_text(text: str, max_sentences: int = 3) -> str:
    """–ì—Ä—É–±–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."""
    if not text:
        return ""
    clean = clean_html(text)
    # –ù–∞–∏–≤–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+', clean)
    summary = ' '.join(sentences[:max_sentences]).strip()
    if not summary:
        summary = clean[:300] + ('...' if len(clean) > 300 else '')
    return summary


def apply_filters(items: list[dict], include: list[str], exclude: list[str]) -> list[dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∫–ª—é—á–∞—é—â–∏–º/–∏—Å–∫–ª—é—á–∞—é—â–∏–º –∫–ª—é—á–∞–º."""
    if not items:
        return []
    include = [k.strip().lower() for k in include if k.strip()]
    exclude = [k.strip().lower() for k in exclude if k.strip()]

    def matches(item: dict) -> bool:
        text = ' '.join([
            str(item.get('title', '')),
            str(item.get('summary', '')),
            str(item.get('text', '')),
        ]).lower()
        if exclude and any(key in text for key in exclude):
            return False
        if include:
            return any(key in text for key in include)
        return True

    return [it for it in items if matches(it)]

def analyze_user_activity(view_history: List[Dict]) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not view_history:
        return {}
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    hourly_activity = {}
    daily_activity = {}
    topics = {}
    sources = {}
    
    for view in view_history:
        try:
            # –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            view_time = datetime.fromisoformat(view['viewed_at'].replace('Z', '+00:00'))
            hour = view_time.hour
            day = view_time.strftime('%A')
            
            hourly_activity[hour] = hourly_activity.get(hour, 0) + 1
            daily_activity[day] = daily_activity.get(day, 0) + 1
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            source = view.get('source', 'unknown')
            sources[source] = sources.get(source, 0) + 1
            
            # –¢–µ–º—ã (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
            title = view.get('title', '').lower()
            for topic in ['python', 'javascript', 'ai', 'ml', 'web', 'mobile', 'database', 'cloud']:
                if topic in title:
                    topics[topic] = topics.get(topic, 0) + 1
                    
        except Exception:
            continue
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∏ –¥–Ω–∏
    peak_hour = max(hourly_activity.items(), key=lambda x: x[1])[0] if hourly_activity else 0
    peak_day = max(daily_activity.items(), key=lambda x: x[1])[0] if daily_activity else 'Unknown'
    
    return {
        'total_views': len(view_history),
        'peak_hour': peak_hour,
        'peak_day': peak_day,
        'hourly_distribution': hourly_activity,
        'daily_distribution': daily_activity,
        'favorite_topics': sorted(topics.items(), key=lambda x: x[1], reverse=True)[:5],
        'favorite_sources': sorted(sources.items(), key=lambda x: x[1], reverse=True)[:5]
    }

def generate_recommendations(user_stats: Dict, recent_posts: List[Dict], user_filters: Tuple[List, List]) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    recommendations = []
    
    if not recent_posts:
        return recommendations
    
    include_keys, exclude_keys = user_filters
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    favorite_topics = user_stats.get('favorite_topics', [])
    favorite_sources = user_stats.get('favorite_sources', [])
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
    post_scores = {}
    
    for post in recent_posts:
        score = 0
        title = post.get('title', '').lower()
        source = post.get('source', '').lower()
        
        # –ë–æ–Ω—É—Å –∑–∞ –ª—é–±–∏–º—ã–µ —Ç–µ–º—ã
        for topic, count in favorite_topics:
            if topic in title:
                score += count * 2
        
        # –ë–æ–Ω—É—Å –∑–∞ –ª—é–±–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        for src, count in favorite_sources:
            if src in source:
                score += count
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
        if include_keys:
            if any(key in title for key in include_keys):
                score += 5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        if exclude_keys:
            if any(key in title for key in exclude_keys):
                score -= 10
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞)
        if post.get('date'):
            try:
                post_date = datetime.fromisoformat(post['date'].replace('Z', '+00:00'))
                days_old = (datetime.now() - post_date).days
                if days_old <= 1:
                    score += 3
                elif days_old <= 3:
                    score += 1
            except:
                pass
        
        post_scores[post] = max(0, score)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    sorted_posts = sorted(post_scores.items(), key=lambda x: x[1], reverse=True)
    
    for post, score in sorted_posts[:10]:
        if score > 0:
            reason = _generate_recommendation_reason(post, score, favorite_topics, favorite_sources)
            recommendations.append({
                'post': post,
                'score': score,
                'reason': reason
            })
    
    return recommendations

def _generate_recommendation_reason(post: Dict, score: int, favorite_topics: List, favorite_sources: List) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    reasons = []
    title = post.get('title', '').lower()
    source = post.get('source', '').lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—ã
    for topic, count in favorite_topics:
        if topic in title:
            reasons.append(f"–≤–∞—à –ª—é–±–∏–º—ã–π —Ç–æ–ø–∏–∫ '{topic}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    for src, count in favorite_sources:
        if src in source:
            reasons.append(f"–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —É –≤–∞—Å –∏—Å—Ç–æ—á–Ω–∏–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å
    if post.get('date'):
        try:
            post_date = datetime.fromisoformat(post['date'].replace('Z', '+00:00'))
            days_old = (datetime.now() - post_date).days
            if days_old <= 1:
                reasons.append("—Å–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å")
        except:
            pass
    
    if reasons:
        return f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {', '.join(reasons)}"
    else:
        return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"

def export_to_markdown(favorites: List[Tuple], view_history: List[Dict], user_stats: Dict) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç."""
    lines = ["# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ News Bot\n\n"]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    lines.append("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
    lines.append(f"- **–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:** {user_stats.get('total_views', 0)}\n")
    lines.append(f"- **–í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:** {user_stats.get('total_favorites', 0)}\n")
    lines.append(f"- **–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:** {user_stats.get('total_searches', 0)}\n")
    
    # –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã
    if user_stats.get('favorite_topics'):
        lines.append("\n### üè∑Ô∏è –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã\n\n")
        for topic, count in user_stats['favorite_topics']:
            lines.append(f"- {topic}: {count} –ø–æ—Å—Ç–æ–≤\n")
    
    # –õ—é–±–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if user_stats.get('favorite_sources'):
        lines.append("\n### üì± –õ—é–±–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
        for source, count in user_stats['favorite_sources']:
            lines.append(f"- {source}: {count} –ø–æ—Å—Ç–æ–≤\n")
    
    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    if favorites:
        lines.append("\n## ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n")
        for i, (title, url) in enumerate(favorites, 1):
            clean_title = clean_html(title)
            lines.append(f"{i}. [{clean_title}]({url})\n")
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
    if view_history:
        lines.append("\n## üìö –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n\n")
        for i, view in enumerate(view_history[-20:], 1):
            title = clean_html(view.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
            source = view.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            date = view.get('viewed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            lines.append(f"{i}. **{title}**\n")
            lines.append(f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n")
            lines.append(f"   üìÖ –î–∞—Ç–∞: {date}\n\n")
    
    return "\n".join(lines)

def export_to_csv(favorites: List[Tuple], view_history: List[Dict], user_stats: Dict) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç."""
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    writer.writerow(['–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
    writer.writerow(['–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', user_stats.get('total_views', 0)])
    writer.writerow(['–í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', user_stats.get('total_favorites', 0)])
    writer.writerow(['–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤', user_stats.get('total_searches', 0)])
    writer.writerow([])
    
    # –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã
    if user_stats.get('favorite_topics'):
        writer.writerow(['–¢–µ–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤'])
        for topic, count in user_stats['favorite_topics']:
            writer.writerow([topic, count])
        writer.writerow([])
    
    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    if favorites:
        writer.writerow(['–ó–∞–≥–æ–ª–æ–≤–æ–∫', '–°—Å—ã–ª–∫–∞'])
        for title, url in favorites:
            clean_title = clean_html(title)
            writer.writerow([clean_title, url])
        writer.writerow([])
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if view_history:
        writer.writerow(['–ó–∞–≥–æ–ª–æ–≤–æ–∫', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'])
        for view in view_history[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
            title = clean_html(view.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
            source = view.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            date = view.get('viewed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            writer.writerow([title, source, date])
    
    return output.getvalue()

def export_to_json(favorites: List[Tuple], view_history: List[Dict], user_stats: Dict) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
    export_data = {
        'export_date': datetime.now().isoformat(),
        'statistics': user_stats,
        'favorites': [
            {
                'title': clean_html(title),
                'url': url
            }
            for title, url in favorites
        ],
        'recent_views': [
            {
                'title': clean_html(view.get('title', '')),
                'source': view.get('source', ''),
                'viewed_at': view.get('viewed_at', ''),
                'time_spent': view.get('time_spent', 0)
            }
            for view in view_history[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
        ]
    }
    
    return json.dumps(export_data, ensure_ascii=False, indent=2)

def extract_tags_from_text(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text:
        return []
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    text_lower = text.lower()
    tags = []
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
    tech_keywords = [
        'python', 'javascript', 'java', 'c++', 'c#', 'go', 'rust', 'php', 'ruby',
        'ai', 'ml', 'machine learning', 'deep learning', 'neural network',
        'web', 'mobile', 'ios', 'android', 'react', 'vue', 'angular',
        'database', 'sql', 'nosql', 'mongodb', 'postgresql', 'mysql',
        'cloud', 'aws', 'azure', 'gcp', 'docker', 'kubernetes',
        'blockchain', 'crypto', 'bitcoin', 'ethereum',
        'cybersecurity', 'security', 'privacy', 'gdpr'
    ]
    
    for keyword in tech_keywords:
        if keyword in text_lower:
            tags.append(keyword)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    return sorted(list(set(tags)))

def calculate_reading_time(text: str) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö."""
    if not text:
        return 0
    
    # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: 200 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    words = len(text.split())
    minutes = max(1, words // 200)
    
    return minutes

def format_time_spent(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å –ø–æ—Å—Ç–æ–º."""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    else:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"

def generate_activity_summary(user_stats: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not user_stats:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
    
    total_views = user_stats.get('total_views', 0)
    total_favorites = user_stats.get('total_favorites', 0)
    total_searches = user_stats.get('total_searches', 0)
    
    summary = f"üìä <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n\n"
    summary += f"üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {total_views}\n"
    summary += f"‚≠ê <b>–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:</b> {total_favorites}\n"
    summary += f"üîç <b>–ü–æ–∏—Å–∫–æ–≤:</b> {total_searches}\n"
    
    if user_stats.get('favorite_topics'):
        top_topic = user_stats['favorite_topics'][0]
        summary += f"\nüè∑Ô∏è <b>–õ—é–±–∏–º–∞—è —Ç–µ–º–∞:</b> {top_topic[0]} ({top_topic[1]} –ø–æ—Å—Ç–æ–≤)\n"
    
    if user_stats.get('favorite_sources'):
        top_source = user_stats['favorite_sources'][0]
        summary += f"üì± <b>–õ—é–±–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:</b> {top_source[0]} ({top_source[1]} –ø–æ—Å—Ç–æ–≤)\n"
    
    if user_stats.get('peak_hour') is not None:
        summary += f"\n‚è∞ <b>–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {user_stats['peak_hour']}:00\n"
    
    if user_stats.get('peak_day'):
        summary += f"üìÖ <b>–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å:</b> {user_stats['peak_day']}\n"
    
    return summary

def format_notification_message(notification: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    notification_type = notification.get('type', 'unknown')
    title = notification.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    message = notification.get('message', '')
    created_at = notification.get('created_at', '')
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    icons = {
        'important_news': 'üö®',
        'digest': 'üì∞',
        'system': '‚öôÔ∏è',
        'reminder': '‚è∞',
        'update': 'üîÑ'
    }
    
    icon = icons.get(notification_type, 'üîî')
    
    formatted = f"{icon} <b>{title}</b>\n\n{message}"
    
    if created_at:
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            time_str = dt.strftime('%d.%m.%Y %H:%M')
            formatted += f"\n\nüìÖ {time_str}"
        except:
            pass
    
    return formatted