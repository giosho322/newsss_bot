import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –¢–û–ö–ï–ù–´ ===
TELEGRAM_TOKEN = '7966480306:AAEzpDlkcU0X_iyBNB3fl5giS579XkPZKLw' # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
WEATHER_API_KEY = '16c701065dc04a0f803133330251008'   # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–ª—é—á —Å weatherapi.com
# ======================================

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_CITY = 1

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    [KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")],
    [KeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥")],
    [KeyboardButton("üíæ –ó–∞–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# -------------------
# –§—É–Ω–∫—Ü–∏–∏
# -------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã –Ω–∞ –±–∞–∑–µ WeatherAPI!\n"
        "–ù–∞–∂–º–∏ ¬´üìç –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥.\n"
        "–ò–ª–∏ ¬´üå§ –ü–æ–≥–æ–¥–∞¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.",
        reply_markup=reply_markup
    )

async def ask_for_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèô –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    return ASK_CITY

async def save_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()

    if not city:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥.")
        return

    user_data[user_id]['city'] = city
    await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=reply_markup)
    return ConversationHandler.END

async def show_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = user_data.get(user_id, {}).get('city')

    if not city:
        await update.message.reply_text(
            "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω. –ù–∞–∂–º–∏ ¬´üìç –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥¬ª –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."
        )
        return

    await get_weather_for_city(update, city)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() in ['–ø–æ–≥–æ–¥–∞', 'üå§ –ø–æ–≥–æ–¥–∞']:
        await show_weather(update, context)
    elif text.lower() in ['—É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥', 'üìç —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥']:
        await ask_for_city(update, context)
    elif text.lower() in ['–∑–∞–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', 'üíæ –∑–∞–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥']:
        await save_current_city(update, context)
    else:
        await get_weather_for_city(update, text)

async def save_current_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = user_data.get(user_id, {}).get('temp_city')
    if city:
        user_data[user_id]['city'] = city
        await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ {city} —Ç–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–π –ø–æ–≥–æ–¥—É.")

async def get_weather_for_city(update: Update, city: str):
    user_id = update.effective_user.id
    user_data[user_id]['temp_city'] = city # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ

    url = "http://api.weatherapi.com/v1/current.json"
    params = {
        'key': WEATHER_API_KEY,
        'q': city,
        'lang': 'ru' # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    }

    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ WeatherAPI: {url}, params: {params}")
        response = requests.get(url, params=params, timeout=10)
        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx –∏–ª–∏ 5xx)
        data = response.json()
        logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç WeatherAPI: {data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç API
        if 'error' in data:
             error_message = data['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
             await update.message.reply_text(
                 f"‚ùå –û—à–∏–±–∫–∞ API WeatherAPI: {error_message}",
                 reply_markup=reply_markup
             )
             return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        location_name = data['location']['name']
        region = data['location']['region']
        country = data['location']['country']
        temp_c = data['current']['temp_c']
        feelslike_c = data['current']['feelslike_c']
        condition_text = data['current']['condition']['text']
        humidity = data['current']['humidity']
        wind_kph = data['current']['wind_kph']
        wind_dir = data['current']['wind_dir']

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üåç <b>–ü–æ–≥–æ–¥–∞ –≤ {location_name}</b>\n"
            f"<i>({region}, {country})</i>\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c}¬∞C</b>\n"
            f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{feelslike_c}¬∞C</b>\n"
            f"‚òÅ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{condition_text}</i>\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n"
            f"üí® –í–µ—Ç–µ—Ä: <b>{wind_kph} –∫–º/—á</b> ({wind_dir})"
        )

        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

    except requests.exceptions.HTTPError as e:
        logging.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WeatherAPI: {e}")
        if response.status_code == 401:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á WeatherAPI. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á –≤ –∫–æ–¥–µ.",
                reply_markup=reply_markup
            )
        elif response.status_code == 400:
             await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω).",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ WeatherAPI.",
                reply_markup=reply_markup
            )
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WeatherAPI: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            reply_markup=reply_markup
        )
    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WeatherAPI: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e} –≤ –æ—Ç–≤–µ—Ç–µ {data}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WeatherAPI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )

# -------------------
# Main
# -------------------

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_city)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üå§ –ë–æ—Ç (–Ω–∞ –±–∞–∑–µ WeatherAPI) –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()